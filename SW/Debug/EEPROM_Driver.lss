
EEPROM_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  000030ec  00003180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  008001da  008001da  000032fa  2**0
                  ALLOC
  3 .stab         000025ec  00000000  00000000  000032fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ef  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009474  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b9d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000be86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__vector_1>
       8:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 10 	call	0x2110	; 0x2110 <main>
      8a:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ed       	ldi	r22, 0xD0	; 208
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 52       	subi	r30, 0x28	; 40
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Update_Ptr2appfunc>:


/*This function is used to update the pointer to the application function so this pointer will be called to
 *refer to the function inside the ISR of timer0 */
void Update_Ptr2appfunc(void(*ptr2func)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Update_Ptr2appfunc+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	ptr2appfunc=ptr2func;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	90 93 e7 01 	sts	0x01E7, r25
     e44:	80 93 e6 01 	sts	0x01E6, r24
	/*Fill the pointer to application function with the sent address from the application  */
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <Timer0_Normal_Mode_Init>:
/*This function will be the intialization of the NORMAL mode for time0
 *It will take as an arguments the follwoing:
 *The prescaler to configure the Fcpu  */
void Timer0_Normal_Mode_Init(Prescaler_type prescaler)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <Timer0_Normal_Mode_Init+0x6>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
	/*First we need to clear the I bit to disable the interrupts during the intialization*/
	SREG =SREG & (~(1<<7));
     e60:	af e5       	ldi	r26, 0x5F	; 95
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ef e5       	ldi	r30, 0x5F	; 95
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 77       	andi	r24, 0x7F	; 127
     e6c:	8c 93       	st	X, r24

	/*Set the Bit FOC0 to activate the Normal mode or the CTC mode without generating a PWM signal */
	TCCR0=TCCR0 |(1<<FOC0);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	8c 93       	st	X, r24

	/*Then Clear the Bites WGM01 & WGM00 to choose the Normal mode as a timer mode*/
	TCCR0= TCCR0 & (~((1<<WGM00)|(WGM01)));
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8c 7b       	andi	r24, 0xBC	; 188
     e88:	8c 93       	st	X, r24

	/*Chosse the prescaler type and configure the bits CS00 & CS01 & CS02*/
	switch(prescaler)
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	3b 83       	std	Y+3, r19	; 0x03
     e92:	2a 83       	std	Y+2, r18	; 0x02
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	9b 81       	ldd	r25, Y+3	; 0x03
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f4       	brne	.+2      	; 0xea0 <Timer0_Normal_Mode_Init+0x4e>
     e9e:	83 c0       	rjmp	.+262    	; 0xfa6 <Timer0_Normal_Mode_Init+0x154>
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	3b 81       	ldd	r19, Y+3	; 0x03
     ea4:	23 30       	cpi	r18, 0x03	; 3
     ea6:	31 05       	cpc	r19, r1
     ea8:	5c f4       	brge	.+22     	; 0xec0 <Timer0_Normal_Mode_Init+0x6e>
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	9b 81       	ldd	r25, Y+3	; 0x03
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 f0       	breq	.+40     	; 0xeda <Timer0_Normal_Mode_Init+0x88>
     eb2:	2a 81       	ldd	r18, Y+2	; 0x02
     eb4:	3b 81       	ldd	r19, Y+3	; 0x03
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <Timer0_Normal_Mode_Init+0x6c>
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <Timer0_Normal_Mode_Init+0xea>
     ebe:	11 c1       	rjmp	.+546    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <Timer0_Normal_Mode_Init+0x7a>
     eca:	a2 c0       	rjmp	.+324    	; 0x1010 <Timer0_Normal_Mode_Init+0x1be>
     ecc:	2a 81       	ldd	r18, Y+2	; 0x02
     ece:	3b 81       	ldd	r19, Y+3	; 0x03
     ed0:	24 30       	cpi	r18, 0x04	; 4
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <Timer0_Normal_Mode_Init+0x86>
     ed6:	d1 c0       	rjmp	.+418    	; 0x107a <Timer0_Normal_Mode_Init+0x228>
     ed8:	04 c1       	rjmp	.+520    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
	{

	case No_Prescaler:
		TCCR0= TCCR0 & (~(1<<CS02));
     eda:	a3 e5       	ldi	r26, 0x53	; 83
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e3 e5       	ldi	r30, 0x53	; 83
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8b 7f       	andi	r24, 0xFB	; 251
     ee6:	8c 93       	st	X, r24
		TCCR0= TCCR0 & (~(1<<CS01));
     ee8:	a3 e5       	ldi	r26, 0x53	; 83
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e3 e5       	ldi	r30, 0x53	; 83
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8d 7f       	andi	r24, 0xFD	; 253
     ef4:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS00);
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e3 e5       	ldi	r30, 0x53	; 83
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	8c 93       	st	X, r24
		Time_Per_tick=1; //In case of the FCPU is equal to 1MHZ
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 db 01 	sts	0x01DB, r25
     f0c:	80 93 da 01 	sts	0x01DA, r24
		Timer_freq=(uint16)1000000/Time_Per_tick;
     f10:	20 91 da 01 	lds	r18, 0x01DA
     f14:	30 91 db 01 	lds	r19, 0x01DB
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	92 e4       	ldi	r25, 0x42	; 66
     f1c:	b9 01       	movw	r22, r18
     f1e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
     f22:	cb 01       	movw	r24, r22
     f24:	cc 01       	movw	r24, r24
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	80 93 dc 01 	sts	0x01DC, r24
     f2e:	90 93 dd 01 	sts	0x01DD, r25
     f32:	a0 93 de 01 	sts	0x01DE, r26
     f36:	b0 93 df 01 	sts	0x01DF, r27
     f3a:	d3 c0       	rjmp	.+422    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
		break;

	case Prescaler_8:
		TCCR0= TCCR0 & (~(1<<CS02));
     f3c:	a3 e5       	ldi	r26, 0x53	; 83
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e5       	ldi	r30, 0x53	; 83
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8b 7f       	andi	r24, 0xFB	; 251
     f48:	8c 93       	st	X, r24
		TCCR0= TCCR0 & (~(1<<CS00));
     f4a:	a3 e5       	ldi	r26, 0x53	; 83
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8e 7f       	andi	r24, 0xFE	; 254
     f56:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS01);
     f58:	a3 e5       	ldi	r26, 0x53	; 83
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e3 e5       	ldi	r30, 0x53	; 83
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	8c 93       	st	X, r24
		Time_Per_tick=8; //In case of the FCPU is equal to 1MHZ
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	90 93 db 01 	sts	0x01DB, r25
     f6e:	80 93 da 01 	sts	0x01DA, r24
		Timer_freq=1000000/Time_Per_tick;
     f72:	80 91 da 01 	lds	r24, 0x01DA
     f76:	90 91 db 01 	lds	r25, 0x01DB
     f7a:	9c 01       	movw	r18, r24
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	80 e4       	ldi	r24, 0x40	; 64
     f82:	92 e4       	ldi	r25, 0x42	; 66
     f84:	af e0       	ldi	r26, 0x0F	; 15
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	bc 01       	movw	r22, r24
     f8a:	cd 01       	movw	r24, r26
     f8c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__divmodsi4>
     f90:	da 01       	movw	r26, r20
     f92:	c9 01       	movw	r24, r18
     f94:	80 93 dc 01 	sts	0x01DC, r24
     f98:	90 93 dd 01 	sts	0x01DD, r25
     f9c:	a0 93 de 01 	sts	0x01DE, r26
     fa0:	b0 93 df 01 	sts	0x01DF, r27
     fa4:	9e c0       	rjmp	.+316    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
		break;

	case Prescaler_64:
		TCCR0= TCCR0 & (~(1<<CS02));
     fa6:	a3 e5       	ldi	r26, 0x53	; 83
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e3 e5       	ldi	r30, 0x53	; 83
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8b 7f       	andi	r24, 0xFB	; 251
     fb2:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS00);
     fb4:	a3 e5       	ldi	r26, 0x53	; 83
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e3 e5       	ldi	r30, 0x53	; 83
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	81 60       	ori	r24, 0x01	; 1
     fc0:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS01);
     fc2:	a3 e5       	ldi	r26, 0x53	; 83
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e3 e5       	ldi	r30, 0x53	; 83
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	8c 93       	st	X, r24
		Time_Per_tick=64; //In case of the FCPU is equal to 1MHZ
     fd0:	80 e4       	ldi	r24, 0x40	; 64
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 db 01 	sts	0x01DB, r25
     fd8:	80 93 da 01 	sts	0x01DA, r24
		Timer_freq=1000000/Time_Per_tick;
     fdc:	80 91 da 01 	lds	r24, 0x01DA
     fe0:	90 91 db 01 	lds	r25, 0x01DB
     fe4:	9c 01       	movw	r18, r24
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	80 e4       	ldi	r24, 0x40	; 64
     fec:	92 e4       	ldi	r25, 0x42	; 66
     fee:	af e0       	ldi	r26, 0x0F	; 15
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__divmodsi4>
     ffa:	da 01       	movw	r26, r20
     ffc:	c9 01       	movw	r24, r18
     ffe:	80 93 dc 01 	sts	0x01DC, r24
    1002:	90 93 dd 01 	sts	0x01DD, r25
    1006:	a0 93 de 01 	sts	0x01DE, r26
    100a:	b0 93 df 01 	sts	0x01DF, r27
    100e:	69 c0       	rjmp	.+210    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
		break;

	case Prescaler_256:
		TCCR0= TCCR0 & (~(1<<CS01));
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8d 7f       	andi	r24, 0xFD	; 253
    101c:	8c 93       	st	X, r24
		TCCR0= TCCR0 & (~(1<<CS00));
    101e:	a3 e5       	ldi	r26, 0x53	; 83
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e3 e5       	ldi	r30, 0x53	; 83
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	8e 7f       	andi	r24, 0xFE	; 254
    102a:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS02);
    102c:	a3 e5       	ldi	r26, 0x53	; 83
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e3 e5       	ldi	r30, 0x53	; 83
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	84 60       	ori	r24, 0x04	; 4
    1038:	8c 93       	st	X, r24
		Time_Per_tick=256; //In case of the FCPU is equal to 1MHZ
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	90 93 db 01 	sts	0x01DB, r25
    1042:	80 93 da 01 	sts	0x01DA, r24
		Timer_freq=1000000/Time_Per_tick;
    1046:	80 91 da 01 	lds	r24, 0x01DA
    104a:	90 91 db 01 	lds	r25, 0x01DB
    104e:	9c 01       	movw	r18, r24
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	80 e4       	ldi	r24, 0x40	; 64
    1056:	92 e4       	ldi	r25, 0x42	; 66
    1058:	af e0       	ldi	r26, 0x0F	; 15
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__divmodsi4>
    1064:	da 01       	movw	r26, r20
    1066:	c9 01       	movw	r24, r18
    1068:	80 93 dc 01 	sts	0x01DC, r24
    106c:	90 93 dd 01 	sts	0x01DD, r25
    1070:	a0 93 de 01 	sts	0x01DE, r26
    1074:	b0 93 df 01 	sts	0x01DF, r27
    1078:	34 c0       	rjmp	.+104    	; 0x10e2 <Timer0_Normal_Mode_Init+0x290>
		break;

	case Prescaler_1024:
		TCCR0= TCCR0 & (~(1<<CS01));
    107a:	a3 e5       	ldi	r26, 0x53	; 83
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e3 e5       	ldi	r30, 0x53	; 83
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS00);
    1088:	a3 e5       	ldi	r26, 0x53	; 83
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e3 e5       	ldi	r30, 0x53	; 83
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8c 93       	st	X, r24
		TCCR0=TCCR0 |(1<<CS02);
    1096:	a3 e5       	ldi	r26, 0x53	; 83
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e3 e5       	ldi	r30, 0x53	; 83
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	84 60       	ori	r24, 0x04	; 4
    10a2:	8c 93       	st	X, r24
		Time_Per_tick=1024; //In case of the FCPU is equal to 1MHZ
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	90 93 db 01 	sts	0x01DB, r25
    10ac:	80 93 da 01 	sts	0x01DA, r24
		Timer_freq=1000000/Time_Per_tick;
    10b0:	80 91 da 01 	lds	r24, 0x01DA
    10b4:	90 91 db 01 	lds	r25, 0x01DB
    10b8:	9c 01       	movw	r18, r24
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	92 e4       	ldi	r25, 0x42	; 66
    10c2:	af e0       	ldi	r26, 0x0F	; 15
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__divmodsi4>
    10ce:	da 01       	movw	r26, r20
    10d0:	c9 01       	movw	r24, r18
    10d2:	80 93 dc 01 	sts	0x01DC, r24
    10d6:	90 93 dd 01 	sts	0x01DD, r25
    10da:	a0 93 de 01 	sts	0x01DE, r26
    10de:	b0 93 df 01 	sts	0x01DF, r27
		/*Do Nothing Because there are no prescalers left to use */
		break;
	}

	/*Clear the TCNT0 register at the intialization function*/
	TCNT0=0;
    10e2:	e2 e5       	ldi	r30, 0x52	; 82
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	10 82       	st	Z, r1

	/*Enable the over flow interrupt to enable the timer to call the ISR when called*/

	TIMSK = TIMSK |(1<<TOIE0);
    10e8:	a9 e5       	ldi	r26, 0x59	; 89
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 e5       	ldi	r30, 0x59	; 89
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	8c 93       	st	X, r24

	/*Set the I bit again to enable the interrupts*/
	SREG=SREG|(1<<7);
    10f6:	af e5       	ldi	r26, 0x5F	; 95
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ef e5       	ldi	r30, 0x5F	; 95
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 68       	ori	r24, 0x80	; 128
    1102:	8c 93       	st	X, r24
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <timer0_Normal_Mode_Delay>:

/*This function will be called from any module which wants to create the a time delay by timer0
 *it takes as an argument the time delay in mille seconds*/
void timer0_Normal_Mode_Delay(uint16 Delay_time)
{
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	2a 97       	sbiw	r28, 0x0a	; 10
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	9a 87       	std	Y+10, r25	; 0x0a
    112e:	89 87       	std	Y+9, r24	; 0x09
	static uint32 Required_Delay_mille=0; //This Variable will store the time required in mille seconds
	static uint32 Required_Delay_micro=0;//This Variable will store the time required in micro seconds
	static uint32 Num_Ticks_required=0;//This Variable will store the number of ticks required to achieve this time delay
	static float32 Num_OverFlows=0;    // This variable will hold the number of over flows required to achieve this time delay
	uint32 Remender_Check=0;
    1130:	1d 82       	std	Y+5, r1	; 0x05
    1132:	1e 82       	std	Y+6, r1	; 0x06
    1134:	1f 82       	std	Y+7, r1	; 0x07
    1136:	18 86       	std	Y+8, r1	; 0x08
	Required_Delay_mille=Delay_time;
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	cc 01       	movw	r24, r24
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	80 93 f8 01 	sts	0x01F8, r24
    1146:	90 93 f9 01 	sts	0x01F9, r25
    114a:	a0 93 fa 01 	sts	0x01FA, r26
    114e:	b0 93 fb 01 	sts	0x01FB, r27
	Required_Delay_micro=((uint32)Required_Delay_mille*((uint32)1000));
    1152:	80 91 f8 01 	lds	r24, 0x01F8
    1156:	90 91 f9 01 	lds	r25, 0x01F9
    115a:	a0 91 fa 01 	lds	r26, 0x01FA
    115e:	b0 91 fb 01 	lds	r27, 0x01FB
    1162:	28 ee       	ldi	r18, 0xE8	; 232
    1164:	33 e0       	ldi	r19, 0x03	; 3
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	80 93 f4 01 	sts	0x01F4, r24
    117a:	90 93 f5 01 	sts	0x01F5, r25
    117e:	a0 93 f6 01 	sts	0x01F6, r26
    1182:	b0 93 f7 01 	sts	0x01F7, r27
	Num_Ticks_required=Required_Delay_micro/Time_Per_tick;
    1186:	e0 90 f4 01 	lds	r14, 0x01F4
    118a:	f0 90 f5 01 	lds	r15, 0x01F5
    118e:	00 91 f6 01 	lds	r16, 0x01F6
    1192:	10 91 f7 01 	lds	r17, 0x01F7
    1196:	80 91 da 01 	lds	r24, 0x01DA
    119a:	90 91 db 01 	lds	r25, 0x01DB
    119e:	9c 01       	movw	r18, r24
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	c8 01       	movw	r24, r16
    11a6:	b7 01       	movw	r22, r14
    11a8:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__udivmodsi4>
    11ac:	da 01       	movw	r26, r20
    11ae:	c9 01       	movw	r24, r18
    11b0:	80 93 f0 01 	sts	0x01F0, r24
    11b4:	90 93 f1 01 	sts	0x01F1, r25
    11b8:	a0 93 f2 01 	sts	0x01F2, r26
    11bc:	b0 93 f3 01 	sts	0x01F3, r27
	Num_OverFlows=(float32)Num_Ticks_required/(uint16)256;
    11c0:	80 91 f0 01 	lds	r24, 0x01F0
    11c4:	90 91 f1 01 	lds	r25, 0x01F1
    11c8:	a0 91 f2 01 	lds	r26, 0x01F2
    11cc:	b0 91 f3 01 	lds	r27, 0x01F3
    11d0:	bc 01       	movw	r22, r24
    11d2:	cd 01       	movw	r24, r26
    11d4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	53 e4       	ldi	r21, 0x43	; 67
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	80 93 ec 01 	sts	0x01EC, r24
    11f4:	90 93 ed 01 	sts	0x01ED, r25
    11f8:	a0 93 ee 01 	sts	0x01EE, r26
    11fc:	b0 93 ef 01 	sts	0x01EF, r27
	/*Testing: no_presaler and delay is 1000ms Num_OverFlow 3906*/
	/* the devision result (Num_Overflows) will be float and one of the arguments (Num_Ticks_required) also will be a float so we could
	 * get a float number in the result*/
	if(Num_OverFlows < 1 )
    1200:	80 91 ec 01 	lds	r24, 0x01EC
    1204:	90 91 ed 01 	lds	r25, 0x01ED
    1208:	a0 91 ee 01 	lds	r26, 0x01EE
    120c:	b0 91 ef 01 	lds	r27, 0x01EF
    1210:	bc 01       	movw	r22, r24
    1212:	cd 01       	movw	r24, r26
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e8       	ldi	r20, 0x80	; 128
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1220:	88 23       	and	r24, r24
    1222:	44 f5       	brge	.+80     	; 0x1274 <timer0_Normal_Mode_Delay+0x164>
		 *
		 *  1)For Example:Num_OverFlows=0.400 ==> then the timer0 will achieve the required time in only 0.400*256 tick = 102 ticks
		 *  2)Then timer0 will start counting from the number (256-102)= 154  ==> TCNT0=154
		 */
		static uint8 Num_Ticks,Start_Count_From=0;
		Num_Ticks=((float32)Num_OverFlows)*((uint16) 256);// Step one as explained above
    1224:	80 91 ec 01 	lds	r24, 0x01EC
    1228:	90 91 ed 01 	lds	r25, 0x01ED
    122c:	a0 91 ee 01 	lds	r26, 0x01EE
    1230:	b0 91 ef 01 	lds	r27, 0x01EF
    1234:	bc 01       	movw	r22, r24
    1236:	cd 01       	movw	r24, r26
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	53 e4       	ldi	r21, 0x43	; 67
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	80 93 eb 01 	sts	0x01EB, r24
		Start_Count_From=((uint16)256) - Num_Ticks;      //  Step two as explained above
    1258:	80 91 eb 01 	lds	r24, 0x01EB
    125c:	81 95       	neg	r24
    125e:	80 93 ea 01 	sts	0x01EA, r24
		TCNT0=Start_Count_From;
    1262:	e2 e5       	ldi	r30, 0x52	; 82
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 91 ea 01 	lds	r24, 0x01EA
    126a:	80 83       	st	Z, r24
		test_point=2;
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	80 93 e5 01 	sts	0x01E5, r24
    1272:	af c0       	rjmp	.+350    	; 0x13d2 <timer0_Normal_Mode_Delay+0x2c2>
	{
		/*If the Num_OverFlows is higher than 1 then it means that the timer0 will over flow multiple times either
		 *Num_OverFlows = (1*n) || Num_OverFlows = (1.y*n)
		 *Then we want to differentiate between the (1*n) || (1.y *n) ==> we want a variable to check the remender (Num_Ticks_required % 256) */

		Remender_Check=Num_Ticks_required %((uint16)256);
    1274:	80 91 f0 01 	lds	r24, 0x01F0
    1278:	90 91 f1 01 	lds	r25, 0x01F1
    127c:	a0 91 f2 01 	lds	r26, 0x01F2
    1280:	b0 91 f3 01 	lds	r27, 0x01F3
    1284:	90 70       	andi	r25, 0x00	; 0
    1286:	a0 70       	andi	r26, 0x00	; 0
    1288:	b0 70       	andi	r27, 0x00	; 0
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	af 83       	std	Y+7, r26	; 0x07
    1290:	b8 87       	std	Y+8, r27	; 0x08
		if(Remender_Check != 0)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	af 81       	ldd	r26, Y+7	; 0x07
    1298:	b8 85       	ldd	r27, Y+8	; 0x08
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	a1 05       	cpc	r26, r1
    129e:	b1 05       	cpc	r27, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <timer0_Normal_Mode_Delay+0x194>
    12a2:	7f c0       	rjmp	.+254    	; 0x13a2 <timer0_Normal_Mode_Delay+0x292>
		{
			/*If there is a reminder then we are in the case (1.y)*n of over flows then we must get the 0.y part as the case above
			 *then start with it then keep over flowing till to reach (n)*/
			float32 Reminder_OverFlow=0;// this variable will store the reminder of the devision
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	a0 e0       	ldi	r26, 0x00	; 0
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	ab 83       	std	Y+3, r26	; 0x03
    12b2:	bc 83       	std	Y+4, r27	; 0x04
			static uint8 Num_Ticks,Start_Count_From=0;
			Reminder_OverFlow=(((float32)Num_OverFlows)-((uint32)Num_OverFlows)*1000); // This will get the part of un completed over flows
    12b4:	e0 90 ec 01 	lds	r14, 0x01EC
    12b8:	f0 90 ed 01 	lds	r15, 0x01ED
    12bc:	00 91 ee 01 	lds	r16, 0x01EE
    12c0:	10 91 ef 01 	lds	r17, 0x01EF
    12c4:	80 91 ec 01 	lds	r24, 0x01EC
    12c8:	90 91 ed 01 	lds	r25, 0x01ED
    12cc:	a0 91 ee 01 	lds	r26, 0x01EE
    12d0:	b0 91 ef 01 	lds	r27, 0x01EF
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	28 ee       	ldi	r18, 0xE8	; 232
    12e2:	33 e0       	ldi	r19, 0x03	; 3
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <__mulsi3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    12fc:	9b 01       	movw	r18, r22
    12fe:	ac 01       	movw	r20, r24
    1300:	c8 01       	movw	r24, r16
    1302:	b7 01       	movw	r22, r14
    1304:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	ab 83       	std	Y+3, r26	; 0x03
    1312:	bc 83       	std	Y+4, r27	; 0x04
			Reminder_OverFlow=(Reminder_OverFlow/(float32)1000);
    1314:	69 81       	ldd	r22, Y+1	; 0x01
    1316:	7a 81       	ldd	r23, Y+2	; 0x02
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a e7       	ldi	r20, 0x7A	; 122
    1322:	54 e4       	ldi	r21, 0x44	; 68
    1324:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04
			Num_Ticks=((float32)Reminder_OverFlow)*((uint16) 256);// Step one as explained above
    1334:	69 81       	ldd	r22, Y+1	; 0x01
    1336:	7a 81       	ldd	r23, Y+2	; 0x02
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	53 e4       	ldi	r21, 0x43	; 67
    1344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	80 93 e9 01 	sts	0x01E9, r24
			Start_Count_From=((uint16)256) - Num_Ticks;      //  Step two as explained above
    135c:	80 91 e9 01 	lds	r24, 0x01E9
    1360:	81 95       	neg	r24
    1362:	80 93 e8 01 	sts	0x01E8, r24
			TCNT0=Start_Count_From;
    1366:	e2 e5       	ldi	r30, 0x52	; 82
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 91 e8 01 	lds	r24, 0x01E8
    136e:	80 83       	st	Z, r24
			Number_of_Over_Flows=(uint32)Num_OverFlows;
    1370:	80 91 ec 01 	lds	r24, 0x01EC
    1374:	90 91 ed 01 	lds	r25, 0x01ED
    1378:	a0 91 ee 01 	lds	r26, 0x01EE
    137c:	b0 91 ef 01 	lds	r27, 0x01EF
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	90 93 e1 01 	sts	0x01E1, r25
    1390:	80 93 e0 01 	sts	0x01E0, r24
			Over_Flow_Flag=1;//set the over flow flag because there will be several overflows.
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 93 e4 01 	sts	0x01E4, r24

			test_point=11;
    139a:	8b e0       	ldi	r24, 0x0B	; 11
    139c:	80 93 e5 01 	sts	0x01E5, r24
    13a0:	18 c0       	rjmp	.+48     	; 0x13d2 <timer0_Normal_Mode_Delay+0x2c2>

		}
		else
		{
			/*If there was no reminder and the number of over flow is higher than 1 then the number of over flows is the same number */
			Number_of_Over_Flows=((uint32)Num_OverFlows);
    13a2:	80 91 ec 01 	lds	r24, 0x01EC
    13a6:	90 91 ed 01 	lds	r25, 0x01ED
    13aa:	a0 91 ee 01 	lds	r26, 0x01EE
    13ae:	b0 91 ef 01 	lds	r27, 0x01EF
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	90 93 e1 01 	sts	0x01E1, r25
    13c2:	80 93 e0 01 	sts	0x01E0, r24
			Over_Flow_Flag=1;//set the over flow flag because there will be several overflows.
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 e4 01 	sts	0x01E4, r24
			test_point=1;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 e5 01 	sts	0x01E5, r24
		}


	}

}
    13d2:	2a 96       	adiw	r28, 0x0a	; 10
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	08 95       	ret

000013ec <__vector_9>:



ISR(TIMER0_OVF_vect)
{
    13ec:	1f 92       	push	r1
    13ee:	0f 92       	push	r0
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	0f 92       	push	r0
    13f4:	11 24       	eor	r1, r1
    13f6:	2f 93       	push	r18
    13f8:	3f 93       	push	r19
    13fa:	4f 93       	push	r20
    13fc:	5f 93       	push	r21
    13fe:	6f 93       	push	r22
    1400:	7f 93       	push	r23
    1402:	8f 93       	push	r24
    1404:	9f 93       	push	r25
    1406:	af 93       	push	r26
    1408:	bf 93       	push	r27
    140a:	ef 93       	push	r30
    140c:	ff 93       	push	r31
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	 *In Case: Of completed several over flows with specific TCNT0
	 *In which there will be several over flows and one uncompleted over flow at the begging
	 *
	 *In Case: Of completed several over flows with TCNT0 =0
	 *In which the ISR will keep incresing the over flow counter till it reach the required number */
	if(Over_Flow_Flag==1)
    1416:	80 91 e4 01 	lds	r24, 0x01E4
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	21 f5       	brne	.+72     	; 0x1466 <__vector_9+0x7a>
	{
		/*when the Over_Flow_Flag ==1 this means you will make several over follows so each ISR increment the Over_Flows_Counter
		 *Until it reach the required number then call the function of the application to execute what is inside it*/

		Over_Flows_Counter++;
    141e:	80 91 e2 01 	lds	r24, 0x01E2
    1422:	90 91 e3 01 	lds	r25, 0x01E3
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	90 93 e3 01 	sts	0x01E3, r25
    142c:	80 93 e2 01 	sts	0x01E2, r24
		if(Over_Flows_Counter==Number_of_Over_Flows)
    1430:	20 91 e2 01 	lds	r18, 0x01E2
    1434:	30 91 e3 01 	lds	r19, 0x01E3
    1438:	80 91 e0 01 	lds	r24, 0x01E0
    143c:	90 91 e1 01 	lds	r25, 0x01E1
    1440:	28 17       	cp	r18, r24
    1442:	39 07       	cpc	r19, r25
    1444:	f9 f4       	brne	.+62     	; 0x1484 <__vector_9+0x98>
		{
			/*When the number of the over flow counter reaches the number of over follow required then call the pointer to the app function*/
			if(ptr2appfunc!=NULL)
    1446:	80 91 e6 01 	lds	r24, 0x01E6
    144a:	90 91 e7 01 	lds	r25, 0x01E7
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	c9 f0       	breq	.+50     	; 0x1484 <__vector_9+0x98>
			{
				/*Check if the pointer to application function not equal to NULL which means that the application
				 *has filled it with the required function to do*/
				ptr2appfunc();
    1452:	e0 91 e6 01 	lds	r30, 0x01E6
    1456:	f0 91 e7 01 	lds	r31, 0x01E7
    145a:	09 95       	icall
				Over_Flows_Counter=0;//after finishing what is inside the pointer to app function just but the over flow count to zero again
    145c:	10 92 e3 01 	sts	0x01E3, r1
    1460:	10 92 e2 01 	sts	0x01E2, r1
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <__vector_9+0x98>
		}
	}
	else
	{
		/*Which means that the Over_Flow_Flag ==0 which means there will be no over flow so once the ISR fires go and call the pointer to the app function */
		if(ptr2appfunc!=NULL)
    1466:	80 91 e6 01 	lds	r24, 0x01E6
    146a:	90 91 e7 01 	lds	r25, 0x01E7
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	49 f0       	breq	.+18     	; 0x1484 <__vector_9+0x98>
		{
			/*Check if the pointer to application function not equal to NULL which means that the application
			 *has filled it with the required function to do*/
			ptr2appfunc();
    1472:	e0 91 e6 01 	lds	r30, 0x01E6
    1476:	f0 91 e7 01 	lds	r31, 0x01E7
    147a:	09 95       	icall
			Over_Flows_Counter=0;//after finishing what is inside the pointer to app function just but the over flow count to zero again
    147c:	10 92 e3 01 	sts	0x01E3, r1
    1480:	10 92 e2 01 	sts	0x01E2, r1
		{
			/*Do nothing because there are no address in the pointer to the application function*/
		}
	}

}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    14b2:	e4 e3       	ldi	r30, 0x34	; 52
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    14ba:	a1 e3       	ldi	r26, 0x31	; 49
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e1 e3       	ldi	r30, 0x31	; 49
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 67       	ori	r24, 0x70	; 112
    14c6:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    14c8:	88 e3       	ldi	r24, 0x38	; 56
    14ca:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    14ce:	8c e0       	ldi	r24, 0x0C	; 12
    14d0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_sendCommand>
}
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	e9 97       	sbiw	r28, 0x39	; 57
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    14f6:	a2 e3       	ldi	r26, 0x32	; 50
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 7e       	andi	r24, 0xEF	; 239
    1502:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1504:	a2 e3       	ldi	r26, 0x32	; 50
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e2 e3       	ldi	r30, 0x32	; 50
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8f 7d       	andi	r24, 0xDF	; 223
    1510:	8c 93       	st	X, r24
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 e8       	ldi	r26, 0x80	; 128
    1518:	bf e3       	ldi	r27, 0x3F	; 63
    151a:	8d ab       	std	Y+53, r24	; 0x35
    151c:	9e ab       	std	Y+54, r25	; 0x36
    151e:	af ab       	std	Y+55, r26	; 0x37
    1520:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1522:	6d a9       	ldd	r22, Y+53	; 0x35
    1524:	7e a9       	ldd	r23, Y+54	; 0x36
    1526:	8f a9       	ldd	r24, Y+55	; 0x37
    1528:	98 ad       	ldd	r25, Y+56	; 0x38
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a e7       	ldi	r20, 0x7A	; 122
    1530:	53 e4       	ldi	r21, 0x43	; 67
    1532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	89 ab       	std	Y+49, r24	; 0x31
    153c:	9a ab       	std	Y+50, r25	; 0x32
    153e:	ab ab       	std	Y+51, r26	; 0x33
    1540:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1542:	69 a9       	ldd	r22, Y+49	; 0x31
    1544:	7a a9       	ldd	r23, Y+50	; 0x32
    1546:	8b a9       	ldd	r24, Y+51	; 0x33
    1548:	9c a9       	ldd	r25, Y+52	; 0x34
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e8       	ldi	r20, 0x80	; 128
    1550:	5f e3       	ldi	r21, 0x3F	; 63
    1552:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1556:	88 23       	and	r24, r24
    1558:	2c f4       	brge	.+10     	; 0x1564 <LCD_sendCommand+0x84>
		__ticks = 1;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	98 ab       	std	Y+48, r25	; 0x30
    1560:	8f a7       	std	Y+47, r24	; 0x2f
    1562:	3f c0       	rjmp	.+126    	; 0x15e2 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1564:	69 a9       	ldd	r22, Y+49	; 0x31
    1566:	7a a9       	ldd	r23, Y+50	; 0x32
    1568:	8b a9       	ldd	r24, Y+51	; 0x33
    156a:	9c a9       	ldd	r25, Y+52	; 0x34
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	3f ef       	ldi	r19, 0xFF	; 255
    1570:	4f e7       	ldi	r20, 0x7F	; 127
    1572:	57 e4       	ldi	r21, 0x47	; 71
    1574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1578:	18 16       	cp	r1, r24
    157a:	4c f5       	brge	.+82     	; 0x15ce <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157c:	6d a9       	ldd	r22, Y+53	; 0x35
    157e:	7e a9       	ldd	r23, Y+54	; 0x36
    1580:	8f a9       	ldd	r24, Y+55	; 0x37
    1582:	98 ad       	ldd	r25, Y+56	; 0x38
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e2       	ldi	r20, 0x20	; 32
    158a:	51 e4       	ldi	r21, 0x41	; 65
    158c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	bc 01       	movw	r22, r24
    1596:	cd 01       	movw	r24, r26
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	98 ab       	std	Y+48, r25	; 0x30
    15a2:	8f a7       	std	Y+47, r24	; 0x2f
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <LCD_sendCommand+0xe4>
    15a6:	89 e1       	ldi	r24, 0x19	; 25
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e a7       	std	Y+46, r25	; 0x2e
    15ac:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	f1 f7       	brne	.-4      	; 0x15b2 <LCD_sendCommand+0xd2>
    15b6:	9e a7       	std	Y+46, r25	; 0x2e
    15b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    15bc:	98 a9       	ldd	r25, Y+48	; 0x30
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	98 ab       	std	Y+48, r25	; 0x30
    15c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c6:	98 a9       	ldd	r25, Y+48	; 0x30
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	69 f7       	brne	.-38     	; 0x15a6 <LCD_sendCommand+0xc6>
    15cc:	14 c0       	rjmp	.+40     	; 0x15f6 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ce:	69 a9       	ldd	r22, Y+49	; 0x31
    15d0:	7a a9       	ldd	r23, Y+50	; 0x32
    15d2:	8b a9       	ldd	r24, Y+51	; 0x33
    15d4:	9c a9       	ldd	r25, Y+52	; 0x34
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	98 ab       	std	Y+48, r25	; 0x30
    15e0:	8f a7       	std	Y+47, r24	; 0x2f
    15e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15e4:	98 a9       	ldd	r25, Y+48	; 0x30
    15e6:	9c a7       	std	Y+44, r25	; 0x2c
    15e8:	8b a7       	std	Y+43, r24	; 0x2b
    15ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    15ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_sendCommand+0x10e>
    15f2:	9c a7       	std	Y+44, r25	; 0x2c
    15f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    15f6:	a2 e3       	ldi	r26, 0x32	; 50
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e2 e3       	ldi	r30, 0x32	; 50
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 64       	ori	r24, 0x40	; 64
    1602:	8c 93       	st	X, r24
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	bf e3       	ldi	r27, 0x3F	; 63
    160c:	8f a3       	std	Y+39, r24	; 0x27
    160e:	98 a7       	std	Y+40, r25	; 0x28
    1610:	a9 a7       	std	Y+41, r26	; 0x29
    1612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	6f a1       	ldd	r22, Y+39	; 0x27
    1616:	78 a5       	ldd	r23, Y+40	; 0x28
    1618:	89 a5       	ldd	r24, Y+41	; 0x29
    161a:	9a a5       	ldd	r25, Y+42	; 0x2a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	53 e4       	ldi	r21, 0x43	; 67
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8b a3       	std	Y+35, r24	; 0x23
    162e:	9c a3       	std	Y+36, r25	; 0x24
    1630:	ad a3       	std	Y+37, r26	; 0x25
    1632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1634:	6b a1       	ldd	r22, Y+35	; 0x23
    1636:	7c a1       	ldd	r23, Y+36	; 0x24
    1638:	8d a1       	ldd	r24, Y+37	; 0x25
    163a:	9e a1       	ldd	r25, Y+38	; 0x26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <LCD_sendCommand+0x176>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9a a3       	std	Y+34, r25	; 0x22
    1652:	89 a3       	std	Y+33, r24	; 0x21
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1656:	6b a1       	ldd	r22, Y+35	; 0x23
    1658:	7c a1       	ldd	r23, Y+36	; 0x24
    165a:	8d a1       	ldd	r24, Y+37	; 0x25
    165c:	9e a1       	ldd	r25, Y+38	; 0x26
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	6f a1       	ldd	r22, Y+39	; 0x27
    1670:	78 a5       	ldd	r23, Y+40	; 0x28
    1672:	89 a5       	ldd	r24, Y+41	; 0x29
    1674:	9a a5       	ldd	r25, Y+42	; 0x2a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9a a3       	std	Y+34, r25	; 0x22
    1694:	89 a3       	std	Y+33, r24	; 0x21
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <LCD_sendCommand+0x1d6>
    1698:	89 e1       	ldi	r24, 0x19	; 25
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	98 a3       	std	Y+32, r25	; 0x20
    169e:	8f 8f       	std	Y+31, r24	; 0x1f
    16a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a2:	98 a1       	ldd	r25, Y+32	; 0x20
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <LCD_sendCommand+0x1c4>
    16a8:	98 a3       	std	Y+32, r25	; 0x20
    16aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <LCD_sendCommand+0x1b8>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6b a1       	ldd	r22, Y+35	; 0x23
    16c2:	7c a1       	ldd	r23, Y+36	; 0x24
    16c4:	8d a1       	ldd	r24, Y+37	; 0x25
    16c6:	9e a1       	ldd	r25, Y+38	; 0x26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9a a3       	std	Y+34, r25	; 0x22
    16d2:	89 a3       	std	Y+33, r24	; 0x21
    16d4:	89 a1       	ldd	r24, Y+33	; 0x21
    16d6:	9a a1       	ldd	r25, Y+34	; 0x22
    16d8:	9e 8f       	std	Y+30, r25	; 0x1e
    16da:	8d 8f       	std	Y+29, r24	; 0x1d
    16dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_sendCommand+0x200>
    16e4:	9e 8f       	std	Y+30, r25	; 0x1e
    16e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	89 ad       	ldd	r24, Y+57	; 0x39
    16ee:	80 83       	st	Z, r24
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e8       	ldi	r26, 0x80	; 128
    16f6:	bf e3       	ldi	r27, 0x3F	; 63
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	ab 8f       	std	Y+27, r26	; 0x1b
    16fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8d 8b       	std	Y+21, r24	; 0x15
    171a:	9e 8b       	std	Y+22, r25	; 0x16
    171c:	af 8b       	std	Y+23, r26	; 0x17
    171e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <LCD_sendCommand+0x262>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <LCD_sendCommand+0x2c2>
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_sendCommand+0x2b0>
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <LCD_sendCommand+0x2a4>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_sendCommand+0x2ec>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    17d4:	a2 e3       	ldi	r26, 0x32	; 50
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e2 e3       	ldi	r30, 0x32	; 50
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7b       	andi	r24, 0xBF	; 191
    17e0:	8c 93       	st	X, r24
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e8       	ldi	r26, 0x80	; 128
    17e8:	bf e3       	ldi	r27, 0x3F	; 63
    17ea:	8b 87       	std	Y+11, r24	; 0x0b
    17ec:	9c 87       	std	Y+12, r25	; 0x0c
    17ee:	ad 87       	std	Y+13, r26	; 0x0d
    17f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a e7       	ldi	r20, 0x7A	; 122
    1800:	53 e4       	ldi	r21, 0x43	; 67
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	8f 83       	std	Y+7, r24	; 0x07
    180c:	98 87       	std	Y+8, r25	; 0x08
    180e:	a9 87       	std	Y+9, r26	; 0x09
    1810:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1826:	88 23       	and	r24, r24
    1828:	2c f4       	brge	.+10     	; 0x1834 <LCD_sendCommand+0x354>
		__ticks = 1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	3f c0       	rjmp	.+126    	; 0x18b2 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	3f ef       	ldi	r19, 0xFF	; 255
    1840:	4f e7       	ldi	r20, 0x7F	; 127
    1842:	57 e4       	ldi	r21, 0x47	; 71
    1844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1848:	18 16       	cp	r1, r24
    184a:	4c f5       	brge	.+82     	; 0x189e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184c:	6b 85       	ldd	r22, Y+11	; 0x0b
    184e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e2       	ldi	r20, 0x20	; 32
    185a:	51 e4       	ldi	r21, 0x41	; 65
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	bc 01       	movw	r22, r24
    1866:	cd 01       	movw	r24, r26
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
    1874:	0f c0       	rjmp	.+30     	; 0x1894 <LCD_sendCommand+0x3b4>
    1876:	89 e1       	ldi	r24, 0x19	; 25
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	f1 f7       	brne	.-4      	; 0x1882 <LCD_sendCommand+0x3a2>
    1886:	9c 83       	std	Y+4, r25	; 0x04
    1888:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	69 f7       	brne	.-38     	; 0x1876 <LCD_sendCommand+0x396>
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189e:	6f 81       	ldd	r22, Y+7	; 0x07
    18a0:	78 85       	ldd	r23, Y+8	; 0x08
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_sendCommand+0x3de>
    18c2:	9a 83       	std	Y+2, r25	; 0x02
    18c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    18c6:	e9 96       	adiw	r28, 0x39	; 57
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	e9 97       	sbiw	r28, 0x39	; 57
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    18ee:	a2 e3       	ldi	r26, 0x32	; 50
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e2 e3       	ldi	r30, 0x32	; 50
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    18fc:	a2 e3       	ldi	r26, 0x32	; 50
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e2 e3       	ldi	r30, 0x32	; 50
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	8f 7d       	andi	r24, 0xDF	; 223
    1908:	8c 93       	st	X, r24
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	8d ab       	std	Y+53, r24	; 0x35
    1914:	9e ab       	std	Y+54, r25	; 0x36
    1916:	af ab       	std	Y+55, r26	; 0x37
    1918:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	6d a9       	ldd	r22, Y+53	; 0x35
    191c:	7e a9       	ldd	r23, Y+54	; 0x36
    191e:	8f a9       	ldd	r24, Y+55	; 0x37
    1920:	98 ad       	ldd	r25, Y+56	; 0x38
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	53 e4       	ldi	r21, 0x43	; 67
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	89 ab       	std	Y+49, r24	; 0x31
    1934:	9a ab       	std	Y+50, r25	; 0x32
    1936:	ab ab       	std	Y+51, r26	; 0x33
    1938:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <LCD_displayCharacter+0x84>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	98 ab       	std	Y+48, r25	; 0x30
    1958:	8f a7       	std	Y+47, r24	; 0x2f
    195a:	3f c0       	rjmp	.+126    	; 0x19da <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	4c f5       	brge	.+82     	; 0x19c6 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	6d a9       	ldd	r22, Y+53	; 0x35
    1976:	7e a9       	ldd	r23, Y+54	; 0x36
    1978:	8f a9       	ldd	r24, Y+55	; 0x37
    197a:	98 ad       	ldd	r25, Y+56	; 0x38
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <LCD_displayCharacter+0xe4>
    199e:	89 e1       	ldi	r24, 0x19	; 25
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9e a7       	std	Y+46, r25	; 0x2e
    19a4:	8d a7       	std	Y+45, r24	; 0x2d
    19a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <LCD_displayCharacter+0xd2>
    19ae:	9e a7       	std	Y+46, r25	; 0x2e
    19b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b4:	98 a9       	ldd	r25, Y+48	; 0x30
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	98 ab       	std	Y+48, r25	; 0x30
    19ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19be:	98 a9       	ldd	r25, Y+48	; 0x30
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	69 f7       	brne	.-38     	; 0x199e <LCD_displayCharacter+0xc6>
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	69 a9       	ldd	r22, Y+49	; 0x31
    19c8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ca:	8b a9       	ldd	r24, Y+51	; 0x33
    19cc:	9c a9       	ldd	r25, Y+52	; 0x34
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8f a7       	std	Y+47, r24	; 0x2f
    19da:	8f a5       	ldd	r24, Y+47	; 0x2f
    19dc:	98 a9       	ldd	r25, Y+48	; 0x30
    19de:	9c a7       	std	Y+44, r25	; 0x2c
    19e0:	8b a7       	std	Y+43, r24	; 0x2b
    19e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_displayCharacter+0x10e>
    19ea:	9c a7       	std	Y+44, r25	; 0x2c
    19ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    19ee:	a2 e3       	ldi	r26, 0x32	; 50
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e2 e3       	ldi	r30, 0x32	; 50
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 64       	ori	r24, 0x40	; 64
    19fa:	8c 93       	st	X, r24
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e8       	ldi	r26, 0x80	; 128
    1a02:	bf e3       	ldi	r27, 0x3F	; 63
    1a04:	8f a3       	std	Y+39, r24	; 0x27
    1a06:	98 a7       	std	Y+40, r25	; 0x28
    1a08:	a9 a7       	std	Y+41, r26	; 0x29
    1a0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a10:	89 a5       	ldd	r24, Y+41	; 0x29
    1a12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	53 e4       	ldi	r21, 0x43	; 67
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8b a3       	std	Y+35, r24	; 0x23
    1a26:	9c a3       	std	Y+36, r25	; 0x24
    1a28:	ad a3       	std	Y+37, r26	; 0x25
    1a2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_displayCharacter+0x176>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9a a3       	std	Y+34, r25	; 0x22
    1a4a:	89 a3       	std	Y+33, r24	; 0x21
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6f a1       	ldd	r22, Y+39	; 0x27
    1a68:	78 a5       	ldd	r23, Y+40	; 0x28
    1a6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9a a3       	std	Y+34, r25	; 0x22
    1a8c:	89 a3       	std	Y+33, r24	; 0x21
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_displayCharacter+0x1d6>
    1a90:	89 e1       	ldi	r24, 0x19	; 25
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	98 a3       	std	Y+32, r25	; 0x20
    1a96:	8f 8f       	std	Y+31, r24	; 0x1f
    1a98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a9a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_displayCharacter+0x1c4>
    1aa0:	98 a3       	std	Y+32, r25	; 0x20
    1aa2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9a a3       	std	Y+34, r25	; 0x22
    1aac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_displayCharacter+0x1b8>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aba:	7c a1       	ldd	r23, Y+36	; 0x24
    1abc:	8d a1       	ldd	r24, Y+37	; 0x25
    1abe:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9a a3       	std	Y+34, r25	; 0x22
    1aca:	89 a3       	std	Y+33, r24	; 0x21
    1acc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ace:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_displayCharacter+0x200>
    1adc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ade:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1ae0:	e5 e3       	ldi	r30, 0x35	; 53
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae6:	80 83       	st	Z, r24
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	89 8f       	std	Y+25, r24	; 0x19
    1af2:	9a 8f       	std	Y+26, r25	; 0x1a
    1af4:	ab 8f       	std	Y+27, r26	; 0x1b
    1af6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	69 8d       	ldd	r22, Y+25	; 0x19
    1afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8d 8b       	std	Y+21, r24	; 0x15
    1b12:	9e 8b       	std	Y+22, r25	; 0x16
    1b14:	af 8b       	std	Y+23, r26	; 0x17
    1b16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_displayCharacter+0x262>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	69 8d       	ldd	r22, Y+25	; 0x19
    1b54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9c 8b       	std	Y+20, r25	; 0x14
    1b78:	8b 8b       	std	Y+19, r24	; 0x13
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_displayCharacter+0x2c2>
    1b7c:	89 e1       	ldi	r24, 0x19	; 25
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9a 8b       	std	Y+18, r25	; 0x12
    1b82:	89 8b       	std	Y+17, r24	; 0x11
    1b84:	89 89       	ldd	r24, Y+17	; 0x11
    1b86:	9a 89       	ldd	r25, Y+18	; 0x12
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_displayCharacter+0x2b0>
    1b8c:	9a 8b       	std	Y+18, r25	; 0x12
    1b8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8b 89       	ldd	r24, Y+19	; 0x13
    1b92:	9c 89       	ldd	r25, Y+20	; 0x14
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_displayCharacter+0x2a4>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba8:	8f 89       	ldd	r24, Y+23	; 0x17
    1baa:	98 8d       	ldd	r25, Y+24	; 0x18
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9c 8b       	std	Y+20, r25	; 0x14
    1bb6:	8b 8b       	std	Y+19, r24	; 0x13
    1bb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bba:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbc:	98 8b       	std	Y+16, r25	; 0x10
    1bbe:	8f 87       	std	Y+15, r24	; 0x0f
    1bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc2:	98 89       	ldd	r25, Y+16	; 0x10
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayCharacter+0x2ec>
    1bc8:	98 8b       	std	Y+16, r25	; 0x10
    1bca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1bcc:	a2 e3       	ldi	r26, 0x32	; 50
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e2 e3       	ldi	r30, 0x32	; 50
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 7b       	andi	r24, 0xBF	; 191
    1bd8:	8c 93       	st	X, r24
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_displayCharacter+0x354>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_displayCharacter+0x3b4>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_displayCharacter+0x3a2>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_displayCharacter+0x396>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_displayCharacter+0x3de>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1cbe:	e9 96       	adiw	r28, 0x39	; 57
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <LCD_displayString+0x6>
    1cd6:	0f 92       	push	r0
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	9b 83       	std	Y+3, r25	; 0x03
    1cde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
    1ce2:	0e c0       	rjmp	.+28     	; 0x1d00 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e2 0f       	add	r30, r18
    1cf2:	f3 1f       	adc	r31, r19
    1cf4:	80 81       	ld	r24, Z
    1cf6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <LCD_displayCharacter>
		i++;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e2 0f       	add	r30, r18
    1d0e:	f3 1f       	adc	r31, r19
    1d10:	80 81       	ld	r24, Z
    1d12:	88 23       	and	r24, r24
    1d14:	39 f7       	brne	.-50     	; 0x1ce4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <LCD_goToRowColumn+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <LCD_goToRowColumn+0x8>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	6a 83       	std	Y+2, r22	; 0x02
	static uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3c 83       	std	Y+4, r19	; 0x04
    1d3a:	2b 83       	std	Y+3, r18	; 0x03
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	c9 f0       	breq	.+50     	; 0x1d78 <LCD_goToRowColumn+0x56>
    1d46:	2b 81       	ldd	r18, Y+3	; 0x03
    1d48:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <LCD_goToRowColumn+0x38>
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <LCD_goToRowColumn+0x4e>
    1d58:	1d c0       	rjmp	.+58     	; 0x1d94 <LCD_goToRowColumn+0x72>
    1d5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	79 f0       	breq	.+30     	; 0x1d82 <LCD_goToRowColumn+0x60>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <LCD_goToRowColumn+0x6a>
    1d6e:	12 c0       	rjmp	.+36     	; 0x1d94 <LCD_goToRowColumn+0x72>
	{
		case 0:
				Address=col;
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	80 93 fc 01 	sts	0x01FC, r24
    1d76:	0e c0       	rjmp	.+28     	; 0x1d94 <LCD_goToRowColumn+0x72>
				break;
		case 1:
				Address=col+0x40;
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	80 5c       	subi	r24, 0xC0	; 192
    1d7c:	80 93 fc 01 	sts	0x01FC, r24
    1d80:	09 c0       	rjmp	.+18     	; 0x1d94 <LCD_goToRowColumn+0x72>
				break;
		case 2:
				Address=col+0x10;
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	80 5f       	subi	r24, 0xF0	; 240
    1d86:	80 93 fc 01 	sts	0x01FC, r24
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <LCD_goToRowColumn+0x72>
				break;
		case 3:
				Address=col+0x50;
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	80 5b       	subi	r24, 0xB0	; 176
    1d90:	80 93 fc 01 	sts	0x01FC, r24
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1d94:	80 91 fc 01 	lds	r24, 0x01FC
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_sendCommand>
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <LCD_displayStringRowColumn+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <LCD_displayStringRowColumn+0x8>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	6a 83       	std	Y+2, r22	; 0x02
    1dbc:	5c 83       	std	Y+4, r21	; 0x04
    1dbe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	6a 81       	ldd	r22, Y+2	; 0x02
    1dc4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_displayString>
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	62 97       	sbiw	r28, 0x12	; 18
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	9a 8b       	std	Y+18, r25	; 0x12
    1df4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1df6:	89 89       	ldd	r24, Y+17	; 0x11
    1df8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfa:	9e 01       	movw	r18, r28
    1dfc:	2f 5f       	subi	r18, 0xFF	; 255
    1dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1e00:	b9 01       	movw	r22, r18
    1e02:	4a e0       	ldi	r20, 0x0A	; 10
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	0e 94 1b 18 	call	0x3036	; 0x3036 <itoa>
   LCD_displayString(buff);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <LCD_displayString>
}
    1e12:	62 96       	adiw	r28, 0x12	; 18
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_sendCommand>
}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <interrupt_intilization>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*This function is used to configure the interrupts. It takes the number of external interrupts 0 | 1 | 2 to be intilaized
 *and on which edge rising or fallen*/
void interrupt_intilization(Ext_inter_num interr_num,Ext_Int_Edge Interr_edge)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <interrupt_intilization+0x6>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6a 83       	std	Y+2, r22	; 0x02
	/*First we need to clear the I bit to disable the interrupts during the intialization*/
	SREG =SREG & (~(1<<7));
    1e46:	af e5       	ldi	r26, 0x5F	; 95
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ef e5       	ldi	r30, 0x5F	; 95
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 77       	andi	r24, 0x7F	; 127
    1e52:	8c 93       	st	X, r24
	/*check which interrupt to be activated */
	if(interr_num==Ext_int0)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	88 23       	and	r24, r24
    1e58:	61 f5       	brne	.+88     	; 0x1eb2 <interrupt_intilization+0x7a>
	{
		DDRD=DDRD&(~(1<<2));  // make pin 2 in PortD to be input for the interrupt INT0
    1e5a:	a1 e3       	ldi	r26, 0x31	; 49
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e1 e3       	ldi	r30, 0x31	; 49
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8b 7f       	andi	r24, 0xFB	; 251
    1e66:	8c 93       	st	X, r24
		/*Interrupt number 0 is to be activated*/
		/*enable the interrupt number 0 which is located in the bit 6 in GICR register*/
		GICR=GICR |(1<<INT0);
    1e68:	ab e5       	ldi	r26, 0x5B	; 91
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	eb e5       	ldi	r30, 0x5B	; 91
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 64       	ori	r24, 0x40	; 64
    1e74:	8c 93       	st	X, r24
		/*Then check which of the edges will fire the interrupt*/
		if(Interr_edge == Rising)
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	88 23       	and	r24, r24
    1e7a:	41 f4       	brne	.+16     	; 0x1e8c <interrupt_intilization+0x54>
		{
			/*interrupt number 0 is to be generated on the Rising edge*/
			MCUCR=MCUCR |((1<<ISC00)|(1<<ISC01));
    1e7c:	a5 e5       	ldi	r26, 0x55	; 85
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e5 e5       	ldi	r30, 0x55	; 85
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	83 60       	ori	r24, 0x03	; 3
    1e88:	8c 93       	st	X, r24
    1e8a:	67 c0       	rjmp	.+206    	; 0x1f5a <interrupt_intilization+0x122>
		}
		else if (Interr_edge == Falling)
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <interrupt_intilization+0x5c>
    1e92:	63 c0       	rjmp	.+198    	; 0x1f5a <interrupt_intilization+0x122>
		{
			/*interrupt number 0 is to be generated on the Falling edge*/
			MCUCR=MCUCR |(1<<ISC01);
    1e94:	a5 e5       	ldi	r26, 0x55	; 85
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e5       	ldi	r30, 0x55	; 85
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	82 60       	ori	r24, 0x02	; 2
    1ea0:	8c 93       	st	X, r24
			MCUCR=MCUCR &(~(1<<ISC00));
    1ea2:	a5 e5       	ldi	r26, 0x55	; 85
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8e 7f       	andi	r24, 0xFE	; 254
    1eae:	8c 93       	st	X, r24
    1eb0:	54 c0       	rjmp	.+168    	; 0x1f5a <interrupt_intilization+0x122>
		{
			/*If there is any input except for rising and falling edge then it will not work*/
		}

	}
	else if(interr_num==Ext_int1)
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	81 30       	cpi	r24, 0x01	; 1
    1eb6:	59 f5       	brne	.+86     	; 0x1f0e <interrupt_intilization+0xd6>
	{
		DDRD=DDRD&(~(1<<3));  // make pin 3 in PortD to be input for the interrupt INT1
    1eb8:	a1 e3       	ldi	r26, 0x31	; 49
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e1 e3       	ldi	r30, 0x31	; 49
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	87 7f       	andi	r24, 0xF7	; 247
    1ec4:	8c 93       	st	X, r24
		/*Interrupt number 1 is to be activated*/
		/*enable the interrupt number 1 which is located in the bit 7 in GICR reg*/
		GICR=GICR |(1<<INT1);
    1ec6:	ab e5       	ldi	r26, 0x5B	; 91
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	eb e5       	ldi	r30, 0x5B	; 91
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 68       	ori	r24, 0x80	; 128
    1ed2:	8c 93       	st	X, r24
		/*Then check which of the edges will fire the interrupt*/
		if(Interr_edge == Rising)
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	88 23       	and	r24, r24
    1ed8:	41 f4       	brne	.+16     	; 0x1eea <interrupt_intilization+0xb2>
		{
			/*interrupt number 0 is to be generated on the Rising edge*/
			MCUCR=MCUCR |((1<<ISC11)|(1<<ISC10));
    1eda:	a5 e5       	ldi	r26, 0x55	; 85
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e5 e5       	ldi	r30, 0x55	; 85
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8c 60       	ori	r24, 0x0C	; 12
    1ee6:	8c 93       	st	X, r24
    1ee8:	38 c0       	rjmp	.+112    	; 0x1f5a <interrupt_intilization+0x122>
		}
		else if (Interr_edge == Falling)
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	a9 f5       	brne	.+106    	; 0x1f5a <interrupt_intilization+0x122>
		{
			/*interrupt number 0 is to be generated on the Falling edge*/
			MCUCR=MCUCR |(1<<ISC11);
    1ef0:	a5 e5       	ldi	r26, 0x55	; 85
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e5 e5       	ldi	r30, 0x55	; 85
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 60       	ori	r24, 0x08	; 8
    1efc:	8c 93       	st	X, r24
			MCUCR=MCUCR &(~(1<<ISC10));
    1efe:	a5 e5       	ldi	r26, 0x55	; 85
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e5       	ldi	r30, 0x55	; 85
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8b 7f       	andi	r24, 0xFB	; 251
    1f0a:	8c 93       	st	X, r24
    1f0c:	26 c0       	rjmp	.+76     	; 0x1f5a <interrupt_intilization+0x122>
			/*If there is any input except for rising and falling edge then it will not work*/
		}

	}

	else if(interr_num==Ext_int2)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	19 f5       	brne	.+70     	; 0x1f5a <interrupt_intilization+0x122>
	{
		DDRB=DDRB&(~(1<<PB2));  // make pin 3 in PortD to be input for the interrupt INT2
    1f14:	a7 e3       	ldi	r26, 0x37	; 55
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e7 e3       	ldi	r30, 0x37	; 55
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8b 7f       	andi	r24, 0xFB	; 251
    1f20:	8c 93       	st	X, r24
		/*Interrupt number 0 is to be activated*/
		/*enable the interrupt number 1 which is located in the bit 7 in GICR reg*/
		GICR=GICR |(1<<INT2);
    1f22:	ab e5       	ldi	r26, 0x5B	; 91
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	eb e5       	ldi	r30, 0x5B	; 91
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 62       	ori	r24, 0x20	; 32
    1f2e:	8c 93       	st	X, r24
		/*Then check which of the edges will fire the interrupt*/
		if(Interr_edge == Rising)
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	88 23       	and	r24, r24
    1f34:	41 f4       	brne	.+16     	; 0x1f46 <interrupt_intilization+0x10e>
		{
			/*interrupt number 0 is to be generated on the Rising edge*/
			MCUCSR=MCUCSR |(1<<ISC2);
    1f36:	a4 e5       	ldi	r26, 0x54	; 84
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e4 e5       	ldi	r30, 0x54	; 84
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 64       	ori	r24, 0x40	; 64
    1f42:	8c 93       	st	X, r24
    1f44:	0a c0       	rjmp	.+20     	; 0x1f5a <interrupt_intilization+0x122>
		}
		else if (Interr_edge == Falling)
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	39 f4       	brne	.+14     	; 0x1f5a <interrupt_intilization+0x122>
		{
			/*interrupt number 0 is to be generated on the Falling edge*/
			MCUCSR=MCUCSR &(~(1<<ISC2));
    1f4c:	a4 e5       	ldi	r26, 0x54	; 84
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e4 e5       	ldi	r30, 0x54	; 84
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 7b       	andi	r24, 0xBF	; 191
    1f58:	8c 93       	st	X, r24
		}

	}

	/*Set the I bit again to enable the interrupts*/
	SREG=SREG|(1<<7);
    1f5a:	af e5       	ldi	r26, 0x5F	; 95
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	ef e5       	ldi	r30, 0x5F	; 95
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	80 68       	ori	r24, 0x80	; 128
    1f66:	8c 93       	st	X, r24
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <Update_ptr2function_int0>:

/*This function will be used to update the pointer to application function address to the external interrupt 0 */
void Update_ptr2function_int0(void (*ptr2function)(void))
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <Update_ptr2function_int0+0x6>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	/*Update the pointer to function in the interrupt module with the address of the function
	 *The application module want to excute when the interrupt number Zero is fired */
	Call_back_func_ptr2int0=ptr2function;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	90 93 fe 01 	sts	0x01FE, r25
    1f88:	80 93 fd 01 	sts	0x01FD, r24
}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <Update_ptr2function_int1>:

/*This function will be used to update the pointer to application function address to the external interrupt 1 */
void Update_ptr2function_int1(void (*ptr2function_int1)(void))
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <Update_ptr2function_int1+0x6>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	/*Update the pointer to function in the interrupt module with the address of the function
	 *The application module want to excute when the interrupt number Zero is fired */
	Call_back_func_ptr2int1=ptr2function_int1;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	90 93 00 02 	sts	0x0200, r25
    1fac:	80 93 ff 01 	sts	0x01FF, r24
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <Update_ptr2function_int2>:

/*This function will be used to update the pointer to application function address to the external interrupt 2 */
void Update_ptr2function_int2(void (*ptr2function_int2)(void))
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <Update_ptr2function_int2+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	/*Update the pointer to function in the interrupt module with the address of the function
	 *The application module want to excute when the interrupt number Zero is fired */
	Call_back_func_ptr2int2=ptr2function_int2;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	90 93 02 02 	sts	0x0202, r25
    1fd0:	80 93 01 02 	sts	0x0201, r24
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <__vector_1>:


ISR(INT0_vect)
{
    1fde:	1f 92       	push	r1
    1fe0:	0f 92       	push	r0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	0f 92       	push	r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	ef 93       	push	r30
    1ffe:	ff 93       	push	r31
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	/*If the interrupt is fired then we want to excute the function of the application has sent us its addrese
	 * in the pointer to function update*/
	if(Call_back_func_ptr2int0!=NULL)
    2008:	80 91 fd 01 	lds	r24, 0x01FD
    200c:	90 91 fe 01 	lds	r25, 0x01FE
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	29 f0       	breq	.+10     	; 0x201e <__vector_1+0x40>
	{
		/*If the pointer has an address of afunction then it will excute it*/
		Call_back_func_ptr2int0();
    2014:	e0 91 fd 01 	lds	r30, 0x01FD
    2018:	f0 91 fe 01 	lds	r31, 0x01FE
    201c:	09 95       	icall
	}
}
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	4f 91       	pop	r20
    2036:	3f 91       	pop	r19
    2038:	2f 91       	pop	r18
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <__vector_2>:

ISR(INT1_vect)
{
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	4f 93       	push	r20
    2054:	5f 93       	push	r21
    2056:	6f 93       	push	r22
    2058:	7f 93       	push	r23
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	af 93       	push	r26
    2060:	bf 93       	push	r27
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	/*If the interrupt is fired then we want to excute the function of the application has sent us its addrese
	 * in the pointer to function update*/
	if(Call_back_func_ptr2int1!=NULL)
    206e:	80 91 ff 01 	lds	r24, 0x01FF
    2072:	90 91 00 02 	lds	r25, 0x0200
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	29 f0       	breq	.+10     	; 0x2084 <__vector_2+0x40>
	{
		/*If the pointer has an address of afunction then it will excute it*/
		Call_back_func_ptr2int1();
    207a:	e0 91 ff 01 	lds	r30, 0x01FF
    207e:	f0 91 00 02 	lds	r31, 0x0200
    2082:	09 95       	icall
	}
}
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	ff 91       	pop	r31
    208a:	ef 91       	pop	r30
    208c:	bf 91       	pop	r27
    208e:	af 91       	pop	r26
    2090:	9f 91       	pop	r25
    2092:	8f 91       	pop	r24
    2094:	7f 91       	pop	r23
    2096:	6f 91       	pop	r22
    2098:	5f 91       	pop	r21
    209a:	4f 91       	pop	r20
    209c:	3f 91       	pop	r19
    209e:	2f 91       	pop	r18
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <__vector_18>:

ISR(INT2_vect)
{
    20aa:	1f 92       	push	r1
    20ac:	0f 92       	push	r0
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	0f 92       	push	r0
    20b2:	11 24       	eor	r1, r1
    20b4:	2f 93       	push	r18
    20b6:	3f 93       	push	r19
    20b8:	4f 93       	push	r20
    20ba:	5f 93       	push	r21
    20bc:	6f 93       	push	r22
    20be:	7f 93       	push	r23
    20c0:	8f 93       	push	r24
    20c2:	9f 93       	push	r25
    20c4:	af 93       	push	r26
    20c6:	bf 93       	push	r27
    20c8:	ef 93       	push	r30
    20ca:	ff 93       	push	r31
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	/*If the interrupt is fired then we want to excute the function of the application has sent us its addrese
	 * in the pointer to function update*/
	if(Call_back_func_ptr2int2!=NULL)
    20d4:	80 91 01 02 	lds	r24, 0x0201
    20d8:	90 91 02 02 	lds	r25, 0x0202
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	29 f0       	breq	.+10     	; 0x20ea <__vector_18+0x40>
	{
		/*If the pointer has an address of afunction then it will excute it*/
		Call_back_func_ptr2int2();
    20e0:	e0 91 01 02 	lds	r30, 0x0201
    20e4:	f0 91 02 02 	lds	r31, 0x0202
    20e8:	09 95       	icall
	}
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	ff 91       	pop	r31
    20f0:	ef 91       	pop	r30
    20f2:	bf 91       	pop	r27
    20f4:	af 91       	pop	r26
    20f6:	9f 91       	pop	r25
    20f8:	8f 91       	pop	r24
    20fa:	7f 91       	pop	r23
    20fc:	6f 91       	pop	r22
    20fe:	5f 91       	pop	r21
    2100:	4f 91       	pop	r20
    2102:	3f 91       	pop	r19
    2104:	2f 91       	pop	r18
    2106:	0f 90       	pop	r0
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	0f 90       	pop	r0
    210c:	1f 90       	pop	r1
    210e:	18 95       	reti

00002110 <main>:
/*functions prototypes*/
void timer0_func(void);
void Set_NVM(void);
void Check_NVM(void);
int main(void)
{
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	cc 58       	subi	r28, 0x8C	; 140
    211e:	d0 40       	sbci	r29, 0x00	; 0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61

	LCD_init(); /* initialize LCD */
    212a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <LCD_init>
	LCD_clearScreen(); /* clear the LCD display */
    212e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
	/*call the function which will init the timer0 module with frequency of (Fcpu/8)*/
	Timer0_Normal_Mode_Init(No_Prescaler);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 29 07 	call	0xe52	; 0xe52 <Timer0_Normal_Mode_Init>
	Update_Ptr2appfunc(timer0_func);//Update the pointer to app function with the written function address
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	97 e1       	ldi	r25, 0x17	; 23
    213c:	0e 94 17 07 	call	0xe2e	; 0xe2e <Update_Ptr2appfunc>
	LCD_displayStringRowColumn(0,1,"Display trial");
    2140:	20 e6       	ldi	r18, 0x60	; 96
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	a9 01       	movw	r20, r18
    214a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
	LCD_clearScreen();
    214e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
	Set_NVM();
    2152:	0e 94 08 17 	call	0x2e10	; 0x2e10 <Set_NVM>
	LCD_displayStringRowColumn(0,1,"Intial the NVM=");
    2156:	2e e6       	ldi	r18, 0x6E	; 110
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	a9 01       	movw	r20, r18
    2160:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
    2164:	fe 01       	movw	r30, r28
    2166:	e7 57       	subi	r30, 0x77	; 119
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	aa ef       	ldi	r26, 0xFA	; 250
    2170:	b4 e4       	ldi	r27, 0x44	; 68
    2172:	80 83       	st	Z, r24
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	a2 83       	std	Z+2, r26	; 0x02
    2178:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217a:	8e 01       	movw	r16, r28
    217c:	0b 57       	subi	r16, 0x7B	; 123
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	e7 57       	subi	r30, 0x77	; 119
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	4a e7       	ldi	r20, 0x7A	; 122
    2194:	53 e4       	ldi	r21, 0x43	; 67
    2196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	f8 01       	movw	r30, r16
    21a0:	80 83       	st	Z, r24
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	a2 83       	std	Z+2, r26	; 0x02
    21a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a8:	fe 01       	movw	r30, r28
    21aa:	eb 57       	subi	r30, 0x7B	; 123
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	44 f4       	brge	.+16     	; 0x21d6 <main+0xc6>
		__ticks = 1;
    21c6:	fe 01       	movw	r30, r28
    21c8:	ed 57       	subi	r30, 0x7D	; 125
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	64 c0       	rjmp	.+200    	; 0x229e <main+0x18e>
	else if (__tmp > 65535)
    21d6:	fe 01       	movw	r30, r28
    21d8:	eb 57       	subi	r30, 0x7B	; 123
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	60 81       	ld	r22, Z
    21de:	71 81       	ldd	r23, Z+1	; 0x01
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	0c f0       	brlt	.+2      	; 0x21f6 <main+0xe6>
    21f4:	43 c0       	rjmp	.+134    	; 0x227c <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	fe 01       	movw	r30, r28
    21f8:	e7 57       	subi	r30, 0x77	; 119
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e2       	ldi	r20, 0x20	; 32
    220a:	51 e4       	ldi	r21, 0x41	; 65
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8e 01       	movw	r16, r28
    2216:	0d 57       	subi	r16, 0x7D	; 125
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	1f c0       	rjmp	.+62     	; 0x226c <main+0x15c>
    222e:	fe 01       	movw	r30, r28
    2230:	ef 57       	subi	r30, 0x7F	; 127
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	89 e1       	ldi	r24, 0x19	; 25
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	80 83       	st	Z, r24
    223c:	fe 01       	movw	r30, r28
    223e:	ef 57       	subi	r30, 0x7F	; 127
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <main+0x136>
    224a:	fe 01       	movw	r30, r28
    224c:	ef 57       	subi	r30, 0x7F	; 127
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	de 01       	movw	r26, r28
    2256:	ad 57       	subi	r26, 0x7D	; 125
    2258:	bf 4f       	sbci	r27, 0xFF	; 255
    225a:	fe 01       	movw	r30, r28
    225c:	ed 57       	subi	r30, 0x7D	; 125
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 81       	ld	r24, Z
    2262:	91 81       	ldd	r25, Z+1	; 0x01
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	9c 93       	st	X, r25
    226a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	fe 01       	movw	r30, r28
    226e:	ed 57       	subi	r30, 0x7D	; 125
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	d1 f6       	brne	.-76     	; 0x222e <main+0x11e>
    227a:	27 c0       	rjmp	.+78     	; 0x22ca <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	8e 01       	movw	r16, r28
    227e:	0d 57       	subi	r16, 0x7D	; 125
    2280:	1f 4f       	sbci	r17, 0xFF	; 255
    2282:	fe 01       	movw	r30, r28
    2284:	eb 57       	subi	r30, 0x7B	; 123
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	de 01       	movw	r26, r28
    22a0:	a1 58       	subi	r26, 0x81	; 129
    22a2:	bf 4f       	sbci	r27, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 57       	subi	r30, 0x7D	; 125
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	8d 93       	st	X+, r24
    22b0:	9c 93       	st	X, r25
    22b2:	fe 01       	movw	r30, r28
    22b4:	e1 58       	subi	r30, 0x81	; 129
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <main+0x1ac>
    22c0:	fe 01       	movw	r30, r28
    22c2:	e1 58       	subi	r30, 0x81	; 129
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
	_delay_ms(2000);
	LCD_clearScreen();
    22ca:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
	Check_NVM();
    22ce:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <Check_NVM>
	LCD_displayStringRowColumn(0,1,"Check on NVM=");
    22d2:	2e e7       	ldi	r18, 0x7E	; 126
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	61 e0       	ldi	r22, 0x01	; 1
    22da:	a9 01       	movw	r20, r18
    22dc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 58       	subi	r30, 0x85	; 133
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	aa ef       	ldi	r26, 0xFA	; 250
    22ec:	b4 e4       	ldi	r27, 0x44	; 68
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	8e 01       	movw	r16, r28
    22f8:	09 58       	subi	r16, 0x89	; 137
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	e5 58       	subi	r30, 0x85	; 133
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a e7       	ldi	r20, 0x7A	; 122
    2310:	53 e4       	ldi	r21, 0x43	; 67
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2324:	fe 01       	movw	r30, r28
    2326:	e9 58       	subi	r30, 0x89	; 137
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	44 f4       	brge	.+16     	; 0x2352 <main+0x242>
		__ticks = 1;
    2342:	fe 01       	movw	r30, r28
    2344:	eb 58       	subi	r30, 0x8B	; 139
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
    2350:	64 c0       	rjmp	.+200    	; 0x241a <main+0x30a>
	else if (__tmp > 65535)
    2352:	fe 01       	movw	r30, r28
    2354:	e9 58       	subi	r30, 0x89	; 137
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	0c f0       	brlt	.+2      	; 0x2372 <main+0x262>
    2370:	43 c0       	rjmp	.+134    	; 0x23f8 <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	fe 01       	movw	r30, r28
    2374:	e5 58       	subi	r30, 0x85	; 133
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8e 01       	movw	r16, r28
    2392:	0b 58       	subi	r16, 0x8B	; 139
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	1f c0       	rjmp	.+62     	; 0x23e8 <main+0x2d8>
    23aa:	fe 01       	movw	r30, r28
    23ac:	ed 58       	subi	r30, 0x8D	; 141
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	89 e1       	ldi	r24, 0x19	; 25
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
    23b8:	fe 01       	movw	r30, r28
    23ba:	ed 58       	subi	r30, 0x8D	; 141
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <main+0x2b2>
    23c6:	fe 01       	movw	r30, r28
    23c8:	ed 58       	subi	r30, 0x8D	; 141
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	de 01       	movw	r26, r28
    23d2:	ab 58       	subi	r26, 0x8B	; 139
    23d4:	bf 4f       	sbci	r27, 0xFF	; 255
    23d6:	fe 01       	movw	r30, r28
    23d8:	eb 58       	subi	r30, 0x8B	; 139
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	11 96       	adiw	r26, 0x01	; 1
    23e4:	9c 93       	st	X, r25
    23e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	fe 01       	movw	r30, r28
    23ea:	eb 58       	subi	r30, 0x8B	; 139
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	d1 f6       	brne	.-76     	; 0x23aa <main+0x29a>
    23f6:	27 c0       	rjmp	.+78     	; 0x2446 <main+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	8e 01       	movw	r16, r28
    23fa:	0b 58       	subi	r16, 0x8B	; 139
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e9 58       	subi	r30, 0x89	; 137
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	de 01       	movw	r26, r28
    241c:	af 58       	subi	r26, 0x8F	; 143
    241e:	bf 4f       	sbci	r27, 0xFF	; 255
    2420:	fe 01       	movw	r30, r28
    2422:	eb 58       	subi	r30, 0x8B	; 139
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	8d 93       	st	X+, r24
    242c:	9c 93       	st	X, r25
    242e:	fe 01       	movw	r30, r28
    2430:	ef 58       	subi	r30, 0x8F	; 143
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <main+0x328>
    243c:	fe 01       	movw	r30, r28
    243e:	ef 58       	subi	r30, 0x8F	; 143
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
	_delay_ms(2000);
	LCD_clearScreen();
    2446:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>



	while(1)
	{
		if(looper==256)
    244a:	80 91 03 02 	lds	r24, 0x0203
    244e:	90 91 04 02 	lds	r25, 0x0204
    2452:	f1 e0       	ldi	r31, 0x01	; 1
    2454:	80 30       	cpi	r24, 0x00	; 0
    2456:	9f 07       	cpc	r25, r31
    2458:	09 f0       	breq	.+2      	; 0x245c <main+0x34c>
    245a:	7e c1       	rjmp	.+764    	; 0x2758 <main+0x648>
		{
			LCD_displayStringRowColumn(0,1,"Looper = 256");
    245c:	2c e8       	ldi	r18, 0x8C	; 140
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	a9 01       	movw	r20, r18
    2466:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
    246a:	fe 01       	movw	r30, r28
    246c:	e3 59       	subi	r30, 0x93	; 147
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	aa ef       	ldi	r26, 0xFA	; 250
    2476:	b4 e4       	ldi	r27, 0x44	; 68
    2478:	80 83       	st	Z, r24
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	a2 83       	std	Z+2, r26	; 0x02
    247e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	8e 01       	movw	r16, r28
    2482:	07 59       	subi	r16, 0x97	; 151
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    2486:	fe 01       	movw	r30, r28
    2488:	e3 59       	subi	r30, 0x93	; 147
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	4a e7       	ldi	r20, 0x7A	; 122
    249a:	53 e4       	ldi	r21, 0x43	; 67
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ae:	fe 01       	movw	r30, r28
    24b0:	e7 59       	subi	r30, 0x97	; 151
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	44 f4       	brge	.+16     	; 0x24dc <main+0x3cc>
		__ticks = 1;
    24cc:	fe 01       	movw	r30, r28
    24ce:	e9 59       	subi	r30, 0x99	; 153
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
    24da:	64 c0       	rjmp	.+200    	; 0x25a4 <main+0x494>
	else if (__tmp > 65535)
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 59       	subi	r30, 0x97	; 151
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	0c f0       	brlt	.+2      	; 0x24fc <main+0x3ec>
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <main+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	fe 01       	movw	r30, r28
    24fe:	e3 59       	subi	r30, 0x93	; 147
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8e 01       	movw	r16, r28
    251c:	09 59       	subi	r16, 0x99	; 153
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <main+0x462>
    2534:	fe 01       	movw	r30, r28
    2536:	eb 59       	subi	r30, 0x9B	; 155
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	fe 01       	movw	r30, r28
    2544:	eb 59       	subi	r30, 0x9B	; 155
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <main+0x43c>
    2550:	fe 01       	movw	r30, r28
    2552:	eb 59       	subi	r30, 0x9B	; 155
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	de 01       	movw	r26, r28
    255c:	a9 59       	subi	r26, 0x99	; 153
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e9 59       	subi	r30, 0x99	; 153
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	11 96       	adiw	r26, 0x01	; 1
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	fe 01       	movw	r30, r28
    2574:	e9 59       	subi	r30, 0x99	; 153
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	d1 f6       	brne	.-76     	; 0x2534 <main+0x424>
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <main+0x4c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	8e 01       	movw	r16, r28
    2584:	09 59       	subi	r16, 0x99	; 153
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e7 59       	subi	r30, 0x97	; 151
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	de 01       	movw	r26, r28
    25a6:	ad 59       	subi	r26, 0x9D	; 157
    25a8:	bf 4f       	sbci	r27, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 59       	subi	r30, 0x99	; 153
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	8d 93       	st	X+, r24
    25b6:	9c 93       	st	X, r25
    25b8:	fe 01       	movw	r30, r28
    25ba:	ed 59       	subi	r30, 0x9D	; 157
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <main+0x4b2>
    25c6:	fe 01       	movw	r30, r28
    25c8:	ed 59       	subi	r30, 0x9D	; 157
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
			_delay_ms(2000);
			LCD_clearScreen();
    25d0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"Looper =");
    25d4:	29 e9       	ldi	r18, 0x99	; 153
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	a9 01       	movw	r20, r18
    25de:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
			LCD_intgerToString(looper);
    25e2:	80 91 03 02 	lds	r24, 0x0203
    25e6:	90 91 04 02 	lds	r25, 0x0204
    25ea:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_intgerToString>
    25ee:	fe 01       	movw	r30, r28
    25f0:	e1 5a       	subi	r30, 0xA1	; 161
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	aa ef       	ldi	r26, 0xFA	; 250
    25fa:	b4 e4       	ldi	r27, 0x44	; 68
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2604:	8e 01       	movw	r16, r28
    2606:	05 5a       	subi	r16, 0xA5	; 165
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	e1 5a       	subi	r30, 0xA1	; 161
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	53 e4       	ldi	r21, 0x43	; 67
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	f8 01       	movw	r30, r16
    262a:	80 83       	st	Z, r24
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	a2 83       	std	Z+2, r26	; 0x02
    2630:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2632:	fe 01       	movw	r30, r28
    2634:	e5 5a       	subi	r30, 0xA5	; 165
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e8       	ldi	r20, 0x80	; 128
    2646:	5f e3       	ldi	r21, 0x3F	; 63
    2648:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    264c:	88 23       	and	r24, r24
    264e:	44 f4       	brge	.+16     	; 0x2660 <main+0x550>
		__ticks = 1;
    2650:	fe 01       	movw	r30, r28
    2652:	e7 5a       	subi	r30, 0xA7	; 167
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	64 c0       	rjmp	.+200    	; 0x2728 <main+0x618>
	else if (__tmp > 65535)
    2660:	fe 01       	movw	r30, r28
    2662:	e5 5a       	subi	r30, 0xA5	; 165
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	0c f0       	brlt	.+2      	; 0x2680 <main+0x570>
    267e:	43 c0       	rjmp	.+134    	; 0x2706 <main+0x5f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	fe 01       	movw	r30, r28
    2682:	e1 5a       	subi	r30, 0xA1	; 161
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	8e 01       	movw	r16, r28
    26a0:	07 5a       	subi	r16, 0xA7	; 167
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	f8 01       	movw	r30, r16
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24
    26b6:	1f c0       	rjmp	.+62     	; 0x26f6 <main+0x5e6>
    26b8:	fe 01       	movw	r30, r28
    26ba:	e9 5a       	subi	r30, 0xA9	; 169
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	89 e1       	ldi	r24, 0x19	; 25
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	fe 01       	movw	r30, r28
    26c8:	e9 5a       	subi	r30, 0xA9	; 169
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <main+0x5c0>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 5a       	subi	r30, 0xA9	; 169
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	de 01       	movw	r26, r28
    26e0:	a7 5a       	subi	r26, 0xA7	; 167
    26e2:	bf 4f       	sbci	r27, 0xFF	; 255
    26e4:	fe 01       	movw	r30, r28
    26e6:	e7 5a       	subi	r30, 0xA7	; 167
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	91 81       	ldd	r25, Z+1	; 0x01
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	11 96       	adiw	r26, 0x01	; 1
    26f2:	9c 93       	st	X, r25
    26f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 5a       	subi	r30, 0xA7	; 167
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	d1 f6       	brne	.-76     	; 0x26b8 <main+0x5a8>
    2704:	7b c2       	rjmp	.+1270   	; 0x2bfc <main+0xaec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	8e 01       	movw	r16, r28
    2708:	07 5a       	subi	r16, 0xA7	; 167
    270a:	1f 4f       	sbci	r17, 0xFF	; 255
    270c:	fe 01       	movw	r30, r28
    270e:	e5 5a       	subi	r30, 0xA5	; 165
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	f8 01       	movw	r30, r16
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	de 01       	movw	r26, r28
    272a:	ab 5a       	subi	r26, 0xAB	; 171
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e7 5a       	subi	r30, 0xA7	; 167
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	11 96       	adiw	r26, 0x01	; 1
    273a:	9c 93       	st	X, r25
    273c:	8e 93       	st	-X, r24
    273e:	fe 01       	movw	r30, r28
    2740:	eb 5a       	subi	r30, 0xAB	; 171
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	91 81       	ldd	r25, Z+1	; 0x01
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <main+0x638>
    274c:	fe 01       	movw	r30, r28
    274e:	eb 5a       	subi	r30, 0xAB	; 171
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	80 83       	st	Z, r24
    2756:	52 c2       	rjmp	.+1188   	; 0x2bfc <main+0xaec>
			_delay_ms(2000);
		}
		else if(looper<256)
    2758:	80 91 03 02 	lds	r24, 0x0203
    275c:	90 91 04 02 	lds	r25, 0x0204
    2760:	8f 3f       	cpi	r24, 0xFF	; 255
    2762:	91 05       	cpc	r25, r1
    2764:	11 f0       	breq	.+4      	; 0x276a <main+0x65a>
    2766:	08 f0       	brcs	.+2      	; 0x276a <main+0x65a>
    2768:	4f c1       	rjmp	.+670    	; 0x2a08 <main+0x8f8>
		{
			LCD_displayStringRowColumn(0,1,"Looper < 256");
    276a:	22 ea       	ldi	r18, 0xA2	; 162
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	a9 01       	movw	r20, r18
    2774:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
    2778:	fe 01       	movw	r30, r28
    277a:	ef 5a       	subi	r30, 0xAF	; 175
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	aa ef       	ldi	r26, 0xFA	; 250
    2784:	b4 e4       	ldi	r27, 0x44	; 68
    2786:	80 83       	st	Z, r24
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	a2 83       	std	Z+2, r26	; 0x02
    278c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	8e 01       	movw	r16, r28
    2790:	03 5b       	subi	r16, 0xB3	; 179
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	fe 01       	movw	r30, r28
    2796:	ef 5a       	subi	r30, 0xAF	; 175
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	53 e4       	ldi	r21, 0x43	; 67
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	80 83       	st	Z, r24
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	a2 83       	std	Z+2, r26	; 0x02
    27ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27bc:	fe 01       	movw	r30, r28
    27be:	e3 5b       	subi	r30, 0xB3	; 179
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	44 f4       	brge	.+16     	; 0x27ea <main+0x6da>
		__ticks = 1;
    27da:	fe 01       	movw	r30, r28
    27dc:	e5 5b       	subi	r30, 0xB5	; 181
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
    27e8:	64 c0       	rjmp	.+200    	; 0x28b2 <main+0x7a2>
	else if (__tmp > 65535)
    27ea:	fe 01       	movw	r30, r28
    27ec:	e3 5b       	subi	r30, 0xB3	; 179
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	0c f0       	brlt	.+2      	; 0x280a <main+0x6fa>
    2808:	43 c0       	rjmp	.+134    	; 0x2890 <main+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	fe 01       	movw	r30, r28
    280c:	ef 5a       	subi	r30, 0xAF	; 175
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8e 01       	movw	r16, r28
    282a:	05 5b       	subi	r16, 0xB5	; 181
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	1f c0       	rjmp	.+62     	; 0x2880 <main+0x770>
    2842:	fe 01       	movw	r30, r28
    2844:	e7 5b       	subi	r30, 0xB7	; 183
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	89 e1       	ldi	r24, 0x19	; 25
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	fe 01       	movw	r30, r28
    2852:	e7 5b       	subi	r30, 0xB7	; 183
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <main+0x74a>
    285e:	fe 01       	movw	r30, r28
    2860:	e7 5b       	subi	r30, 0xB7	; 183
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	de 01       	movw	r26, r28
    286a:	a5 5b       	subi	r26, 0xB5	; 181
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	e5 5b       	subi	r30, 0xB5	; 181
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	11 96       	adiw	r26, 0x01	; 1
    287c:	9c 93       	st	X, r25
    287e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	fe 01       	movw	r30, r28
    2882:	e5 5b       	subi	r30, 0xB5	; 181
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	d1 f6       	brne	.-76     	; 0x2842 <main+0x732>
    288e:	27 c0       	rjmp	.+78     	; 0x28de <main+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2890:	8e 01       	movw	r16, r28
    2892:	05 5b       	subi	r16, 0xB5	; 181
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	e3 5b       	subi	r30, 0xB3	; 179
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	de 01       	movw	r26, r28
    28b4:	a9 5b       	subi	r26, 0xB9	; 185
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	e5 5b       	subi	r30, 0xB5	; 181
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	8d 93       	st	X+, r24
    28c4:	9c 93       	st	X, r25
    28c6:	fe 01       	movw	r30, r28
    28c8:	e9 5b       	subi	r30, 0xB9	; 185
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <main+0x7c0>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e9 5b       	subi	r30, 0xB9	; 185
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
			_delay_ms(2000);
			LCD_clearScreen();
    28de:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"Looper =");
    28e2:	29 e9       	ldi	r18, 0x99	; 153
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	a9 01       	movw	r20, r18
    28ec:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
			LCD_intgerToString(looper);
    28f0:	80 91 03 02 	lds	r24, 0x0203
    28f4:	90 91 04 02 	lds	r25, 0x0204
    28f8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_intgerToString>
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 5b       	subi	r30, 0xBD	; 189
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	aa ef       	ldi	r26, 0xFA	; 250
    2908:	b4 e4       	ldi	r27, 0x44	; 68
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	8e 01       	movw	r16, r28
    2914:	01 5c       	subi	r16, 0xC1	; 193
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	ed 5b       	subi	r30, 0xBD	; 189
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a e7       	ldi	r20, 0x7A	; 122
    292c:	53 e4       	ldi	r21, 0x43	; 67
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	f8 01       	movw	r30, r16
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2940:	fe 01       	movw	r30, r28
    2942:	ff 96       	adiw	r30, 0x3f	; 63
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	2c f4       	brge	.+10     	; 0x2966 <main+0x856>
		__ticks = 1;
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e af       	std	Y+62, r25	; 0x3e
    2962:	8d af       	std	Y+61, r24	; 0x3d
    2964:	46 c0       	rjmp	.+140    	; 0x29f2 <main+0x8e2>
	else if (__tmp > 65535)
    2966:	fe 01       	movw	r30, r28
    2968:	ff 96       	adiw	r30, 0x3f	; 63
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	64 f5       	brge	.+88     	; 0x29da <main+0x8ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	fe 01       	movw	r30, r28
    2984:	ed 5b       	subi	r30, 0xBD	; 189
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	60 81       	ld	r22, Z
    298a:	71 81       	ldd	r23, Z+1	; 0x01
    298c:	82 81       	ldd	r24, Z+2	; 0x02
    298e:	93 81       	ldd	r25, Z+3	; 0x03
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e af       	std	Y+62, r25	; 0x3e
    29ae:	8d af       	std	Y+61, r24	; 0x3d
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <main+0x8c0>
    29b2:	89 e1       	ldi	r24, 0x19	; 25
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c af       	std	Y+60, r25	; 0x3c
    29b8:	8b af       	std	Y+59, r24	; 0x3b
    29ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    29bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <main+0x8ae>
    29c2:	9c af       	std	Y+60, r25	; 0x3c
    29c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9e af       	std	Y+62, r25	; 0x3e
    29ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <main+0x8a2>
    29d8:	11 c1       	rjmp	.+546    	; 0x2bfc <main+0xaec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	fe 01       	movw	r30, r28
    29dc:	ff 96       	adiw	r30, 0x3f	; 63
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9e af       	std	Y+62, r25	; 0x3e
    29f0:	8d af       	std	Y+61, r24	; 0x3d
    29f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    29f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    29f6:	9a af       	std	Y+58, r25	; 0x3a
    29f8:	89 af       	std	Y+57, r24	; 0x39
    29fa:	89 ad       	ldd	r24, Y+57	; 0x39
    29fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <main+0x8ee>
    2a02:	9a af       	std	Y+58, r25	; 0x3a
    2a04:	89 af       	std	Y+57, r24	; 0x39
    2a06:	fa c0       	rjmp	.+500    	; 0x2bfc <main+0xaec>
			_delay_ms(2000);
		}
		else
		{
			LCD_displayStringRowColumn(0,1,"Looper > 256");
    2a08:	2f ea       	ldi	r18, 0xAF	; 175
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	a9 01       	movw	r20, r18
    2a12:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	aa ef       	ldi	r26, 0xFA	; 250
    2a1c:	b4 e4       	ldi	r27, 0x44	; 68
    2a1e:	8d ab       	std	Y+53, r24	; 0x35
    2a20:	9e ab       	std	Y+54, r25	; 0x36
    2a22:	af ab       	std	Y+55, r26	; 0x37
    2a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a26:	6d a9       	ldd	r22, Y+53	; 0x35
    2a28:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a e7       	ldi	r20, 0x7A	; 122
    2a34:	53 e4       	ldi	r21, 0x43	; 67
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	89 ab       	std	Y+49, r24	; 0x31
    2a40:	9a ab       	std	Y+50, r25	; 0x32
    2a42:	ab ab       	std	Y+51, r26	; 0x33
    2a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a46:	69 a9       	ldd	r22, Y+49	; 0x31
    2a48:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <main+0x958>
		__ticks = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <main+0x9d6>
	else if (__tmp > 65535)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	3f ef       	ldi	r19, 0xFF	; 255
    2a74:	4f e7       	ldi	r20, 0x7F	; 127
    2a76:	57 e4       	ldi	r21, 0x47	; 71
    2a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7c:	18 16       	cp	r1, r24
    2a7e:	4c f5       	brge	.+82     	; 0x2ad2 <main+0x9c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	6d a9       	ldd	r22, Y+53	; 0x35
    2a82:	7e a9       	ldd	r23, Y+54	; 0x36
    2a84:	8f a9       	ldd	r24, Y+55	; 0x37
    2a86:	98 ad       	ldd	r25, Y+56	; 0x38
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	98 ab       	std	Y+48, r25	; 0x30
    2aa6:	8f a7       	std	Y+47, r24	; 0x2f
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <main+0x9b8>
    2aaa:	89 e1       	ldi	r24, 0x19	; 25
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e a7       	std	Y+46, r25	; 0x2e
    2ab0:	8d a7       	std	Y+45, r24	; 0x2d
    2ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <main+0x9a6>
    2aba:	9e a7       	std	Y+46, r25	; 0x2e
    2abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <main+0x99a>
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <main+0x9ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	9c a7       	std	Y+44, r25	; 0x2c
    2aec:	8b a7       	std	Y+43, r24	; 0x2b
    2aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <main+0x9e2>
    2af6:	9c a7       	std	Y+44, r25	; 0x2c
    2af8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			LCD_clearScreen();
    2afa:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,1,"Looper =");
    2afe:	29 e9       	ldi	r18, 0x99	; 153
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	a9 01       	movw	r20, r18
    2b08:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
			LCD_intgerToString(looper);
    2b0c:	80 91 03 02 	lds	r24, 0x0203
    2b10:	90 91 04 02 	lds	r25, 0x0204
    2b14:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_intgerToString>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	aa ef       	ldi	r26, 0xFA	; 250
    2b1e:	b4 e4       	ldi	r27, 0x44	; 68
    2b20:	8f a3       	std	Y+39, r24	; 0x27
    2b22:	98 a7       	std	Y+40, r25	; 0x28
    2b24:	a9 a7       	std	Y+41, r26	; 0x29
    2b26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6f a1       	ldd	r22, Y+39	; 0x27
    2b2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	53 e4       	ldi	r21, 0x43	; 67
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8b a3       	std	Y+35, r24	; 0x23
    2b42:	9c a3       	std	Y+36, r25	; 0x24
    2b44:	ad a3       	std	Y+37, r26	; 0x25
    2b46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b48:	6b a1       	ldd	r22, Y+35	; 0x23
    2b4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <main+0xa5a>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9a a3       	std	Y+34, r25	; 0x22
    2b66:	89 a3       	std	Y+33, r24	; 0x21
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <main+0xad8>
	else if (__tmp > 65535)
    2b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b70:	9e a1       	ldd	r25, Y+38	; 0x26
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <main+0xac4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6f a1       	ldd	r22, Y+39	; 0x27
    2b84:	78 a5       	ldd	r23, Y+40	; 0x28
    2b86:	89 a5       	ldd	r24, Y+41	; 0x29
    2b88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9a a3       	std	Y+34, r25	; 0x22
    2ba8:	89 a3       	std	Y+33, r24	; 0x21
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <main+0xaba>
    2bac:	89 e1       	ldi	r24, 0x19	; 25
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	98 a3       	std	Y+32, r25	; 0x20
    2bb2:	8f 8f       	std	Y+31, r24	; 0x1f
    2bb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb6:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0xaa8>
    2bbc:	98 a3       	std	Y+32, r25	; 0x20
    2bbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9a a3       	std	Y+34, r25	; 0x22
    2bc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	89 a1       	ldd	r24, Y+33	; 0x21
    2bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <main+0xa9c>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <main+0xaec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bda:	9e a1       	ldd	r25, Y+38	; 0x26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9a a3       	std	Y+34, r25	; 0x22
    2be6:	89 a3       	std	Y+33, r24	; 0x21
    2be8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bea:	9a a1       	ldd	r25, Y+34	; 0x22
    2bec:	9e 8f       	std	Y+30, r25	; 0x1e
    2bee:	8d 8f       	std	Y+29, r24	; 0x1d
    2bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <main+0xae4>
    2bf8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bfa:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
		}
		LCD_clearScreen();
    2bfc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Add(0) =");
    2c00:	2c eb       	ldi	r18, 0xBC	; 188
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	a9 01       	movw	r20, r18
    2c0a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
		LCD_intgerToString(eeprom_read_word((uint16*)0));
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 3c 18 	call	0x3078	; 0x3078 <__eerd_word_m16>
    2c16:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_intgerToString>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	aa ef       	ldi	r26, 0xFA	; 250
    2c20:	b4 e4       	ldi	r27, 0x44	; 68
    2c22:	89 8f       	std	Y+25, r24	; 0x19
    2c24:	9a 8f       	std	Y+26, r25	; 0x1a
    2c26:	ab 8f       	std	Y+27, r26	; 0x1b
    2c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	53 e4       	ldi	r21, 0x43	; 67
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8d 8b       	std	Y+21, r24	; 0x15
    2c44:	9e 8b       	std	Y+22, r25	; 0x16
    2c46:	af 8b       	std	Y+23, r26	; 0x17
    2c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <main+0xb5c>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c 8b       	std	Y+20, r25	; 0x14
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <main+0xbda>
	else if (__tmp > 65535)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <main+0xbc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	69 8d       	ldd	r22, Y+25	; 0x19
    2c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9c 8b       	std	Y+20, r25	; 0x14
    2caa:	8b 8b       	std	Y+19, r24	; 0x13
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <main+0xbbc>
    2cae:	89 e1       	ldi	r24, 0x19	; 25
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9a 8b       	std	Y+18, r25	; 0x12
    2cb4:	89 8b       	std	Y+17, r24	; 0x11
    2cb6:	89 89       	ldd	r24, Y+17	; 0x11
    2cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <main+0xbaa>
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <main+0xb9e>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <main+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	8b 89       	ldd	r24, Y+19	; 0x13
    2cec:	9c 89       	ldd	r25, Y+20	; 0x14
    2cee:	98 8b       	std	Y+16, r25	; 0x10
    2cf0:	8f 87       	std	Y+15, r24	; 0x0f
    2cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf4:	98 89       	ldd	r25, Y+16	; 0x10
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <main+0xbe6>
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);

		LCD_clearScreen();
    2cfe:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,1,"Add(257) =");
    2d02:	25 ec       	ldi	r18, 0xC5	; 197
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	a9 01       	movw	r20, r18
    2d0c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_displayStringRowColumn>
		LCD_intgerToString(eeprom_read_word((uint16*)257));
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	0e 94 3c 18 	call	0x3078	; 0x3078 <__eerd_word_m16>
    2d18:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <LCD_intgerToString>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	aa ef       	ldi	r26, 0xFA	; 250
    2d22:	b4 e4       	ldi	r27, 0x44	; 68
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	9c 87       	std	Y+12, r25	; 0x0c
    2d28:	ad 87       	std	Y+13, r26	; 0x0d
    2d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a e7       	ldi	r20, 0x7A	; 122
    2d3a:	53 e4       	ldi	r21, 0x43	; 67
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8f 83       	std	Y+7, r24	; 0x07
    2d46:	98 87       	std	Y+8, r25	; 0x08
    2d48:	a9 87       	std	Y+9, r26	; 0x09
    2d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <main+0xc5e>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <main+0xcdc>
	else if (__tmp > 65535)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <main+0xcc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <main+0xcbe>
    2db0:	89 e1       	ldi	r24, 0x19	; 25
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <main+0xcac>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <main+0xca0>
    2dd6:	39 cb       	rjmp	.-2446   	; 0x244a <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <main+0xce8>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	24 cb       	rjmp	.-2488   	; 0x244a <main+0x33a>

00002e02 <timer0_func>:

/*************************Functions Bodies******************************/

/*This function is  used to be called to do what is required from timer0 timeout*/
void timer0_func(void)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62

}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <Set_NVM>:

/*This function is used intialize the NVM with all addresses equal ZERO except the first addresse  */

void Set_NVM(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <Set_NVM+0x6>
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
	eeprom_write_word((uint16*)0,(uint16)1);
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	70 e0       	ldi	r23, 0x00	; 0
    2e22:	0e 94 42 18 	call	0x3084	; 0x3084 <__eewr_word_m16>
	for(uint16 i=1;i<=256;i++)
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	0b c0       	rjmp	.+22     	; 0x2e46 <Set_NVM+0x36>
	{
		eeprom_write_word((uint16*)i,(uint16)0);
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	60 e0       	ldi	r22, 0x00	; 0
    2e36:	70 e0       	ldi	r23, 0x00	; 0
    2e38:	0e 94 42 18 	call	0x3084	; 0x3084 <__eewr_word_m16>
/*This function is used intialize the NVM with all addresses equal ZERO except the first addresse  */

void Set_NVM(void)
{
	eeprom_write_word((uint16*)0,(uint16)1);
	for(uint16 i=1;i<=256;i++)
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	21 e0       	ldi	r18, 0x01	; 1
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	92 07       	cpc	r25, r18
    2e50:	78 f3       	brcs	.-34     	; 0x2e30 <Set_NVM+0x20>
	{
		eeprom_write_word((uint16*)i,(uint16)0);
	}

}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <Check_NVM>:

void Check_NVM(void)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <Check_NVM+0x6>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
	Data_Stored=eeprom_read_word((uint16*)0);
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 3c 18 	call	0x3078	; 0x3078 <__eerd_word_m16>
    2e6e:	90 93 06 02 	sts	0x0206, r25
    2e72:	80 93 05 02 	sts	0x0205, r24
	if(Data_Stored==(uint16)1)
    2e76:	80 91 05 02 	lds	r24, 0x0205
    2e7a:	90 91 06 02 	lds	r25, 0x0206
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	91 05       	cpc	r25, r1
    2e82:	31 f4       	brne	.+12     	; 0x2e90 <Check_NVM+0x34>
	{
		looper=1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	90 93 04 02 	sts	0x0204, r25
    2e8c:	80 93 03 02 	sts	0x0203, r24
	}
	for(uint16 i=1;i<=256;i++)
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9a 83       	std	Y+2, r25	; 0x02
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	1c c0       	rjmp	.+56     	; 0x2ed2 <Check_NVM+0x76>
	{
		Data_Stored=eeprom_read_word((uint16*)i);
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9e:	0e 94 3c 18 	call	0x3078	; 0x3078 <__eerd_word_m16>
    2ea2:	90 93 06 02 	sts	0x0206, r25
    2ea6:	80 93 05 02 	sts	0x0205, r24
		if(Data_Stored==(uint16)0)
    2eaa:	80 91 05 02 	lds	r24, 0x0205
    2eae:	90 91 06 02 	lds	r25, 0x0206
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	49 f4       	brne	.+18     	; 0x2ec8 <Check_NVM+0x6c>
		{
			looper++;
    2eb6:	80 91 03 02 	lds	r24, 0x0203
    2eba:	90 91 04 02 	lds	r25, 0x0204
    2ebe:	01 96       	adiw	r24, 0x01	; 1
    2ec0:	90 93 04 02 	sts	0x0204, r25
    2ec4:	80 93 03 02 	sts	0x0203, r24
	Data_Stored=eeprom_read_word((uint16*)0);
	if(Data_Stored==(uint16)1)
	{
		looper=1;
	}
	for(uint16 i=1;i<=256;i++)
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
    2eca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	21 e0       	ldi	r18, 0x01	; 1
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	92 07       	cpc	r25, r18
    2edc:	f0 f2       	brcs	.-68     	; 0x2e9a <Check_NVM+0x3e>
		if(Data_Stored==(uint16)0)
		{
			looper++;
		}
	}
}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <__mulsi3>:
    2ee8:	62 9f       	mul	r22, r18
    2eea:	d0 01       	movw	r26, r0
    2eec:	73 9f       	mul	r23, r19
    2eee:	f0 01       	movw	r30, r0
    2ef0:	82 9f       	mul	r24, r18
    2ef2:	e0 0d       	add	r30, r0
    2ef4:	f1 1d       	adc	r31, r1
    2ef6:	64 9f       	mul	r22, r20
    2ef8:	e0 0d       	add	r30, r0
    2efa:	f1 1d       	adc	r31, r1
    2efc:	92 9f       	mul	r25, r18
    2efe:	f0 0d       	add	r31, r0
    2f00:	83 9f       	mul	r24, r19
    2f02:	f0 0d       	add	r31, r0
    2f04:	74 9f       	mul	r23, r20
    2f06:	f0 0d       	add	r31, r0
    2f08:	65 9f       	mul	r22, r21
    2f0a:	f0 0d       	add	r31, r0
    2f0c:	99 27       	eor	r25, r25
    2f0e:	72 9f       	mul	r23, r18
    2f10:	b0 0d       	add	r27, r0
    2f12:	e1 1d       	adc	r30, r1
    2f14:	f9 1f       	adc	r31, r25
    2f16:	63 9f       	mul	r22, r19
    2f18:	b0 0d       	add	r27, r0
    2f1a:	e1 1d       	adc	r30, r1
    2f1c:	f9 1f       	adc	r31, r25
    2f1e:	bd 01       	movw	r22, r26
    2f20:	cf 01       	movw	r24, r30
    2f22:	11 24       	eor	r1, r1
    2f24:	08 95       	ret

00002f26 <__udivmodhi4>:
    2f26:	aa 1b       	sub	r26, r26
    2f28:	bb 1b       	sub	r27, r27
    2f2a:	51 e1       	ldi	r21, 0x11	; 17
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <__udivmodhi4_ep>

00002f2e <__udivmodhi4_loop>:
    2f2e:	aa 1f       	adc	r26, r26
    2f30:	bb 1f       	adc	r27, r27
    2f32:	a6 17       	cp	r26, r22
    2f34:	b7 07       	cpc	r27, r23
    2f36:	10 f0       	brcs	.+4      	; 0x2f3c <__udivmodhi4_ep>
    2f38:	a6 1b       	sub	r26, r22
    2f3a:	b7 0b       	sbc	r27, r23

00002f3c <__udivmodhi4_ep>:
    2f3c:	88 1f       	adc	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	5a 95       	dec	r21
    2f42:	a9 f7       	brne	.-22     	; 0x2f2e <__udivmodhi4_loop>
    2f44:	80 95       	com	r24
    2f46:	90 95       	com	r25
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	08 95       	ret

00002f4e <__udivmodsi4>:
    2f4e:	a1 e2       	ldi	r26, 0x21	; 33
    2f50:	1a 2e       	mov	r1, r26
    2f52:	aa 1b       	sub	r26, r26
    2f54:	bb 1b       	sub	r27, r27
    2f56:	fd 01       	movw	r30, r26
    2f58:	0d c0       	rjmp	.+26     	; 0x2f74 <__udivmodsi4_ep>

00002f5a <__udivmodsi4_loop>:
    2f5a:	aa 1f       	adc	r26, r26
    2f5c:	bb 1f       	adc	r27, r27
    2f5e:	ee 1f       	adc	r30, r30
    2f60:	ff 1f       	adc	r31, r31
    2f62:	a2 17       	cp	r26, r18
    2f64:	b3 07       	cpc	r27, r19
    2f66:	e4 07       	cpc	r30, r20
    2f68:	f5 07       	cpc	r31, r21
    2f6a:	20 f0       	brcs	.+8      	; 0x2f74 <__udivmodsi4_ep>
    2f6c:	a2 1b       	sub	r26, r18
    2f6e:	b3 0b       	sbc	r27, r19
    2f70:	e4 0b       	sbc	r30, r20
    2f72:	f5 0b       	sbc	r31, r21

00002f74 <__udivmodsi4_ep>:
    2f74:	66 1f       	adc	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	88 1f       	adc	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	1a 94       	dec	r1
    2f7e:	69 f7       	brne	.-38     	; 0x2f5a <__udivmodsi4_loop>
    2f80:	60 95       	com	r22
    2f82:	70 95       	com	r23
    2f84:	80 95       	com	r24
    2f86:	90 95       	com	r25
    2f88:	9b 01       	movw	r18, r22
    2f8a:	ac 01       	movw	r20, r24
    2f8c:	bd 01       	movw	r22, r26
    2f8e:	cf 01       	movw	r24, r30
    2f90:	08 95       	ret

00002f92 <__divmodsi4>:
    2f92:	97 fb       	bst	r25, 7
    2f94:	09 2e       	mov	r0, r25
    2f96:	05 26       	eor	r0, r21
    2f98:	0e d0       	rcall	.+28     	; 0x2fb6 <__divmodsi4_neg1>
    2f9a:	57 fd       	sbrc	r21, 7
    2f9c:	04 d0       	rcall	.+8      	; 0x2fa6 <__divmodsi4_neg2>
    2f9e:	d7 df       	rcall	.-82     	; 0x2f4e <__udivmodsi4>
    2fa0:	0a d0       	rcall	.+20     	; 0x2fb6 <__divmodsi4_neg1>
    2fa2:	00 1c       	adc	r0, r0
    2fa4:	38 f4       	brcc	.+14     	; 0x2fb4 <__divmodsi4_exit>

00002fa6 <__divmodsi4_neg2>:
    2fa6:	50 95       	com	r21
    2fa8:	40 95       	com	r20
    2faa:	30 95       	com	r19
    2fac:	21 95       	neg	r18
    2fae:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb0:	4f 4f       	sbci	r20, 0xFF	; 255
    2fb2:	5f 4f       	sbci	r21, 0xFF	; 255

00002fb4 <__divmodsi4_exit>:
    2fb4:	08 95       	ret

00002fb6 <__divmodsi4_neg1>:
    2fb6:	f6 f7       	brtc	.-4      	; 0x2fb4 <__divmodsi4_exit>
    2fb8:	90 95       	com	r25
    2fba:	80 95       	com	r24
    2fbc:	70 95       	com	r23
    2fbe:	61 95       	neg	r22
    2fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc6:	08 95       	ret

00002fc8 <__prologue_saves__>:
    2fc8:	2f 92       	push	r2
    2fca:	3f 92       	push	r3
    2fcc:	4f 92       	push	r4
    2fce:	5f 92       	push	r5
    2fd0:	6f 92       	push	r6
    2fd2:	7f 92       	push	r7
    2fd4:	8f 92       	push	r8
    2fd6:	9f 92       	push	r9
    2fd8:	af 92       	push	r10
    2fda:	bf 92       	push	r11
    2fdc:	cf 92       	push	r12
    2fde:	df 92       	push	r13
    2fe0:	ef 92       	push	r14
    2fe2:	ff 92       	push	r15
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	ca 1b       	sub	r28, r26
    2ff2:	db 0b       	sbc	r29, r27
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	09 94       	ijmp

00003000 <__epilogue_restores__>:
    3000:	2a 88       	ldd	r2, Y+18	; 0x12
    3002:	39 88       	ldd	r3, Y+17	; 0x11
    3004:	48 88       	ldd	r4, Y+16	; 0x10
    3006:	5f 84       	ldd	r5, Y+15	; 0x0f
    3008:	6e 84       	ldd	r6, Y+14	; 0x0e
    300a:	7d 84       	ldd	r7, Y+13	; 0x0d
    300c:	8c 84       	ldd	r8, Y+12	; 0x0c
    300e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3010:	aa 84       	ldd	r10, Y+10	; 0x0a
    3012:	b9 84       	ldd	r11, Y+9	; 0x09
    3014:	c8 84       	ldd	r12, Y+8	; 0x08
    3016:	df 80       	ldd	r13, Y+7	; 0x07
    3018:	ee 80       	ldd	r14, Y+6	; 0x06
    301a:	fd 80       	ldd	r15, Y+5	; 0x05
    301c:	0c 81       	ldd	r16, Y+4	; 0x04
    301e:	1b 81       	ldd	r17, Y+3	; 0x03
    3020:	aa 81       	ldd	r26, Y+2	; 0x02
    3022:	b9 81       	ldd	r27, Y+1	; 0x01
    3024:	ce 0f       	add	r28, r30
    3026:	d1 1d       	adc	r29, r1
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	ed 01       	movw	r28, r26
    3034:	08 95       	ret

00003036 <itoa>:
    3036:	fb 01       	movw	r30, r22
    3038:	9f 01       	movw	r18, r30
    303a:	e8 94       	clt
    303c:	42 30       	cpi	r20, 0x02	; 2
    303e:	c4 f0       	brlt	.+48     	; 0x3070 <itoa+0x3a>
    3040:	45 32       	cpi	r20, 0x25	; 37
    3042:	b4 f4       	brge	.+44     	; 0x3070 <itoa+0x3a>
    3044:	4a 30       	cpi	r20, 0x0A	; 10
    3046:	29 f4       	brne	.+10     	; 0x3052 <itoa+0x1c>
    3048:	97 fb       	bst	r25, 7
    304a:	1e f4       	brtc	.+6      	; 0x3052 <itoa+0x1c>
    304c:	90 95       	com	r25
    304e:	81 95       	neg	r24
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	64 2f       	mov	r22, r20
    3054:	77 27       	eor	r23, r23
    3056:	0e 94 93 17 	call	0x2f26	; 0x2f26 <__udivmodhi4>
    305a:	80 5d       	subi	r24, 0xD0	; 208
    305c:	8a 33       	cpi	r24, 0x3A	; 58
    305e:	0c f0       	brlt	.+2      	; 0x3062 <itoa+0x2c>
    3060:	89 5d       	subi	r24, 0xD9	; 217
    3062:	81 93       	st	Z+, r24
    3064:	cb 01       	movw	r24, r22
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	a1 f7       	brne	.-24     	; 0x3052 <itoa+0x1c>
    306a:	16 f4       	brtc	.+4      	; 0x3070 <itoa+0x3a>
    306c:	5d e2       	ldi	r21, 0x2D	; 45
    306e:	51 93       	st	Z+, r21
    3070:	10 82       	st	Z, r1
    3072:	c9 01       	movw	r24, r18
    3074:	0c 94 47 18 	jmp	0x308e	; 0x308e <strrev>

00003078 <__eerd_word_m16>:
    3078:	a8 e1       	ldi	r26, 0x18	; 24
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	42 e0       	ldi	r20, 0x02	; 2
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__eerd_blraw_m16>

00003084 <__eewr_word_m16>:
    3084:	0e 94 67 18 	call	0x30ce	; 0x30ce <__eewr_byte_m16>
    3088:	27 2f       	mov	r18, r23
    308a:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__eewr_r18_m16>

0000308e <strrev>:
    308e:	dc 01       	movw	r26, r24
    3090:	fc 01       	movw	r30, r24
    3092:	67 2f       	mov	r22, r23
    3094:	71 91       	ld	r23, Z+
    3096:	77 23       	and	r23, r23
    3098:	e1 f7       	brne	.-8      	; 0x3092 <strrev+0x4>
    309a:	32 97       	sbiw	r30, 0x02	; 2
    309c:	04 c0       	rjmp	.+8      	; 0x30a6 <strrev+0x18>
    309e:	7c 91       	ld	r23, X
    30a0:	6d 93       	st	X+, r22
    30a2:	70 83       	st	Z, r23
    30a4:	62 91       	ld	r22, -Z
    30a6:	ae 17       	cp	r26, r30
    30a8:	bf 07       	cpc	r27, r31
    30aa:	c8 f3       	brcs	.-14     	; 0x309e <strrev+0x10>
    30ac:	08 95       	ret

000030ae <__eerd_block_m16>:
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22

000030b2 <__eerd_blraw_m16>:
    30b2:	fc 01       	movw	r30, r24
    30b4:	e1 99       	sbic	0x1c, 1	; 28
    30b6:	fe cf       	rjmp	.-4      	; 0x30b4 <__eerd_blraw_m16+0x2>
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <__eerd_blraw_m16+0x14>
    30ba:	ff bb       	out	0x1f, r31	; 31
    30bc:	ee bb       	out	0x1e, r30	; 30
    30be:	e0 9a       	sbi	0x1c, 0	; 28
    30c0:	31 96       	adiw	r30, 0x01	; 1
    30c2:	0d b2       	in	r0, 0x1d	; 29
    30c4:	0d 92       	st	X+, r0
    30c6:	41 50       	subi	r20, 0x01	; 1
    30c8:	50 40       	sbci	r21, 0x00	; 0
    30ca:	b8 f7       	brcc	.-18     	; 0x30ba <__eerd_blraw_m16+0x8>
    30cc:	08 95       	ret

000030ce <__eewr_byte_m16>:
    30ce:	26 2f       	mov	r18, r22

000030d0 <__eewr_r18_m16>:
    30d0:	e1 99       	sbic	0x1c, 1	; 28
    30d2:	fe cf       	rjmp	.-4      	; 0x30d0 <__eewr_r18_m16>
    30d4:	9f bb       	out	0x1f, r25	; 31
    30d6:	8e bb       	out	0x1e, r24	; 30
    30d8:	2d bb       	out	0x1d, r18	; 29
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	e2 9a       	sbi	0x1c, 2	; 28
    30e0:	e1 9a       	sbi	0x1c, 1	; 28
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	01 96       	adiw	r24, 0x01	; 1
    30e6:	08 95       	ret

000030e8 <_exit>:
    30e8:	f8 94       	cli

000030ea <__stop_program>:
    30ea:	ff cf       	rjmp	.-2      	; 0x30ea <__stop_program>
